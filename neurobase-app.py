import streamlit as st
import pandas as pd
import numpy as np
import datetime
import json
import os
import base64
from PIL import Image
import io
import matplotlib.pyplot as plt
import time
import hashlib
import sqlite3
import uuid
import yaml
from yaml.loader import SafeLoader
from datetime import datetime, timedelta

# Vers√£o do aplicativo
APP_VERSION = "1.0.1"

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="NeuroBase - Sistema de Gest√£o em Psicomotricidade",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilos CSS customizados
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #4527A0;
        text-align: center;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.8rem;
        color: #5E35B1;
        margin-bottom: 0.5rem;
    }
    .card {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }
    .icon-text {
        display: flex;
        align-items: center;
        gap: 10px;
    }
    .skill-tag {
        background-color: #E1BEE7;
        color: #4A148C;
        padding: 5px 10px;
        border-radius: 15px;
        margin: 5px;
        display: inline-block;
        font-size: 0.85rem;
        cursor: pointer;
    }
    .skill-tag-selected {
        background-color: #7B1FA2;
        color: white;
    }
    .metric-card {
        background-color: #EDE7F6;
        border-radius: 8px;
        padding: 15px;
        text-align: center;
    }
    .tabs-container {
        margin-top: 20px;
    }
    .version-info {
        position: fixed;
        bottom: 10px;
        right: 10px;
        font-size: 0.7rem;
        color: #9E9E9E;
    }
    .stAlert {
        margin-top: 15px;
    }
</style>
""", unsafe_allow_html=True)

# Habilidades psicomotoras para sele√ß√£o
HABILIDADES_PSICOMOTORAS = {
    "Tonicidade": [
        "Regula√ß√£o de t√¥nus muscular", 
        "Sustenta√ß√£o corporal", 
        "Preparo para a√ß√£o"
    ],
    "Equil√≠brio": [
        "Equil√≠brio est√°tico", 
        "Equil√≠brio din√¢mico", 
        "Recupera√ß√£o de equil√≠brio"
    ],
    "Esquema Corporal": [
        "Identifica√ß√£o de partes do corpo", 
        "Consci√™ncia corporal", 
        "Imagem corporal"
    ],
    "Lateralidade": [
        "Domin√¢ncia lateral", 
        "Orienta√ß√£o direita/esquerda", 
        "Cruzamento de linha m√©dia"
    ],
    "Coordena√ß√£o Motora Global": [
        "Coordena√ß√£o de grandes movimentos", 
        "Saltos", 
        "Corrida", 
        "Arremessos"
    ],
    "Coordena√ß√£o Motora Fina": [
        "Preens√£o", 
        "Manipula√ß√£o de objetos pequenos", 
        "Grafomotricidade", 
        "Recorte"
    ],
    "No√ß√£o Espacial": [
        "Orienta√ß√£o espacial", 
        "Organiza√ß√£o espacial", 
        "Rela√ß√µes espaciais"
    ],
    "No√ß√£o Temporal": [
        "Sequ√™ncia temporal", 
        "Ritmo", 
        "Dura√ß√£o"
    ],
    "Praxia": [
        "Planejamento motor", 
        "Imita√ß√£o de gestos", 
        "Sequenciamento motor"
    ],
    "Habilidades Socioemocionais": [
        "Express√£o corporal", 
        "Regula√ß√£o emocional", 
        "Intera√ß√£o social"
    ],
    "Habilidades Cognitivas": [
        "Aten√ß√£o", 
        "Mem√≥ria", 
        "Percep√ß√£o", 
        "Resolu√ß√£o de problemas"
    ]
}

# Tipos de Avalia√ß√µes
TIPOS_AVALIACAO = [
    "EDM - Escala de Desenvolvimento Motor (Rosa Neto)",
    "TGMD-2 - Test of Gross Motor Development",
    "FAMA - Ferramenta de Avalia√ß√£o Motora para Autismo",
    "Bateria Psicomotora de V√≠tor da Fonseca",
    "Escala de Equil√≠brio de Berg",
    "Protocolo de Avalia√ß√£o de Coordena√ß√£o Motora Fina",
    "Avalia√ß√£o Inicial",
    "Reavalia√ß√£o",
    "Avalia√ß√£o Personalizada"
]

# N√≠veis de desenvolvimento (para avalia√ß√µes)
NIVEIS_DESENVOLVIMENTO = [
    "Muito inferior",
    "Inferior",
    "Normal baixo",
    "Normal m√©dio",
    "Normal alto",
    "Superior",
    "Muito superior"
]

# Status de agendamento
STATUS_AGENDAMENTO = [
    "Agendado", 
    "Confirmado", 
    "Em andamento", 
    "Conclu√≠do", 
    "Cancelado", 
    "Faltou"
]

# Cores para status
CORES_STATUS = {
    "Agendado": "#E3F2FD",
    "Confirmado": "#DCEDC8",
    "Em andamento": "#FFF9C4",
    "Conclu√≠do": "#C8E6C9",
    "Cancelado": "#FFCDD2",
    "Faltou": "#FFCCBC"
}

###############################
# FUN√á√ïES DO BANCO DE DADOS
###############################

def inicializar_banco_dados():
    """Inicializa o banco de dados SQLite se n√£o existir"""
    
    # Criar diret√≥rio de dados se n√£o existir
    os.makedirs("dados", exist_ok=True)
    
    # Conectar ao banco de dados (ou criar se n√£o existir)
    conn = sqlite3.connect('dados/neurobase.db')
    cursor = conn.cursor()
    
    # Criar tabela de pacientes
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS pacientes (
        id TEXT PRIMARY KEY,
        nome TEXT NOT NULL,
        data_nascimento TEXT,
        responsavel TEXT,
        telefone TEXT,
        email TEXT,
        data_entrada TEXT,
        diagnostico TEXT,
        nivel_suporte TEXT,
        foto TEXT,
        preferencias TEXT,
        coisas_acalmam TEXT,
        nao_gosta TEXT,
        gatilhos TEXT,
        brinquedos_favoritos TEXT,
        data_cadastro TEXT,
        ultima_atualizacao TEXT
    )
    ''')
    
    # Criar tabela de atendimentos
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS atendimentos (
        id TEXT PRIMARY KEY,
        paciente_id TEXT NOT NULL,
        data TEXT NOT NULL,
        terapeuta TEXT NOT NULL,
        habilidades_trabalhadas TEXT,
        descricao TEXT,
        evolucao TEXT,
        comportamentos TEXT,
        data_registro TEXT,
        FOREIGN KEY (paciente_id) REFERENCES pacientes (id)
    )
    ''')
    
    # Criar tabela de avalia√ß√µes
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS avaliacoes (
        id TEXT PRIMARY KEY,
        paciente_id TEXT NOT NULL,
        data TEXT NOT NULL,
        tipo_avaliacao TEXT,
        terapeuta TEXT,
        resultados TEXT,
        recomendacoes TEXT,
        proxima_avaliacao TEXT,
        areas_avaliadas TEXT,
        pontuacao TEXT,
        data_registro TEXT,
        FOREIGN KEY (paciente_id) REFERENCES pacientes (id)
    )
    ''')
    
    # Criar tabela de agendamentos
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS agendamentos (
        id TEXT PRIMARY KEY,
        paciente_id TEXT NOT NULL,
        data TEXT NOT NULL,
        horario TEXT NOT NULL,
        terapeuta TEXT NOT NULL,
        status TEXT,
        observacao TEXT,
        data_registro TEXT,
        FOREIGN KEY (paciente_id) REFERENCES pacientes (id)
    )
    ''')
    
    # Criar tabela de logs
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS logs (
        id TEXT PRIMARY KEY,
        timestamp TEXT NOT NULL,
        usuario TEXT,
        acao TEXT NOT NULL,
        tabela TEXT NOT NULL,
        registro_id TEXT,
        detalhes TEXT
    )
    ''')
    
    # Criar tabela de backup
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS backups (
        id TEXT PRIMARY KEY,
        timestamp TEXT NOT NULL,
        usuario TEXT,
        arquivo TEXT,
        detalhes TEXT
    )
    ''')

    # Criar tabela de usu√°rios
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS usuarios (
        id TEXT PRIMARY KEY,
        nome TEXT NOT NULL,
        email TEXT UNIQUE NOT NULL,
        senha_hash TEXT NOT NULL,
        perfil TEXT NOT NULL,
        ativo INTEGER NOT NULL DEFAULT 1,
        data_cadastro TEXT,
        ultimo_acesso TEXT
    )
    ''')
    
    # Criar usu√°rios padr√£o se n√£o existirem
    cursor.execute("SELECT COUNT(*) FROM usuarios")
    if cursor.fetchone()[0] == 0:
        # Criar usu√°rio admin
        admin_id = str(uuid.uuid4())
        senha_admin = hashlib.sha256("admin".encode()).hexdigest()
        cursor.execute('''
        INSERT INTO usuarios (id, nome, email, senha_hash, perfil, data_cadastro)
        VALUES (?, ?, ?, ?, ?, ?)
        ''', (admin_id, "Administrador", "admin@neurobase.com", senha_admin, "admin", datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        
        # Criar usu√°rio terapeuta
        terapeuta_id = str(uuid.uuid4())
        senha_terapeuta = hashlib.sha256("terapeuta".encode()).hexdigest()
        cursor.execute('''
        INSERT INTO usuarios (id, nome, email, senha_hash, perfil, data_cadastro)
        VALUES (?, ?, ?, ?, ?, ?)
        ''', (terapeuta_id, "Terapeuta", "terapeuta@neurobase.com", senha_terapeuta, "terapeuta", datetime.now().strftime('%Y-%m-%d %H:%M:%S')))

    # Fazer commit das altera√ß√µes e fechar conex√£o
    conn.commit()
    conn.close()
    
    return True

def registrar_log(usuario, acao, tabela, registro_id, detalhes=None):
    """Registra uma a√ß√£o no log do sistema"""
    conn = sqlite3.connect('dados/neurobase.db')
    cursor = conn.cursor()
    
    log_id = str(uuid.uuid4())
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    cursor.execute('''
    INSERT INTO logs (id, timestamp, usuario, acao, tabela, registro_id, detalhes)
    VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (log_id, timestamp, usuario, acao, tabela, registro_id, detalhes))
    
    conn.commit()
    conn.close()
    
    return True

def carregar_pacientes():
    """Carrega todos os pacientes do banco de dados"""
    conn = sqlite3.connect('dados/neurobase.db')
    pacientes_df = pd.read_sql("SELECT * FROM pacientes", conn)
    conn.close()
    return pacientes_df

def carregar_atendimentos():
    """Carrega todos os atendimentos do banco de dados"""
    conn = sqlite3.connect('dados/neurobase.db')
    atendimentos_df = pd.read_sql("SELECT * FROM atendimentos", conn)
    conn.close()
    return atendimentos_df

def carregar_avaliacoes():
    """Carrega todas as avalia√ß√µes do banco de dados"""
    conn = sqlite3.connect('dados/neurobase.db')
    avaliacoes_df = pd.read_sql("SELECT * FROM avaliacoes", conn)
    conn.close()
    return avaliacoes_df

def carregar_agendamentos():
    """Carrega todos os agendamentos do banco de dados"""
    conn = sqlite3.connect('dados/neurobase.db')
    agendamentos_df = pd.read_sql("SELECT * FROM agendamentos", conn)
    conn.close()
    return agendamentos_df

def inserir_paciente(dados_paciente):
    """Insere um novo paciente no banco de dados"""
    conn = sqlite3.connect('dados/neurobase.db')
    cursor = conn.cursor()
    
    # Gerar ID √∫nico
    paciente_id = str(uuid.uuid4())
    agora = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    # Preparar consulta
    campos = ', '.join(dados_paciente.keys()) + ', id, data_cadastro, ultima_atualizacao'
    placeholders = ', '.join(['?'] * len(dados_paciente)) + ', ?, ?, ?'
    
    # Executar consulta
    query = f"INSERT INTO pacientes ({campos}) VALUES ({placeholders})"
    valores = list(dados_paciente.values()) + [paciente_id, agora, agora]
    
    cursor.execute(query, valores)
    conn.commit()
    
    # Registrar log
    usuario = st.session_state.usuario if 'usuario' in st.session_state else 'Sistema'
    registrar_log(usuario, 'Inserir', 'pacientes', paciente_id, f"Novo paciente: {dados_paciente['nome']}")
    
    conn.close()
    
    return paciente_id

def inserir_atendimento(dados_atendimento):
    """Insere um novo atendimento no banco de dados"""
    conn = sqlite3.connect('dados/neurobase.db')
    cursor = conn.cursor()
    
    # Gerar ID √∫nico
    atendimento_id = str(uuid.uuid4())
    agora = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    # Adicionar campos adicionais
    dados_completos = dados_atendimento.copy()
    dados_completos['id'] = atendimento_id
    dados_completos['data_registro'] = agora
    
    # Preparar consulta
    campos = ', '.join(dados_completos.keys())
    placeholders = ', '.join(['?'] * len(dados_completos))
    
    # Executar consulta
    query = f"INSERT INTO atendimentos ({campos}) VALUES ({placeholders})"
    valores = list(dados_completos.values())
    
    cursor.execute(query, valores)
    conn.commit()
    
    # Registrar log
    usuario = st.session_state.usuario if 'usuario' in st.session_state else 'Sistema'
    registrar_log(usuario, 'Inserir', 'atendimentos', atendimento_id, f"Novo atendimento: Paciente {dados_atendimento['paciente_id']}")
    
    conn.close()
    
    return atendimento_id

def inserir_avaliacao(dados_avaliacao):
    """Insere uma nova avalia√ß√£o no banco de dados"""
    conn = sqlite3.connect('dados/neurobase.db')
    cursor = conn.cursor()
    
    # Gerar ID √∫nico
    avaliacao_id = str(uuid.uuid4())
    agora = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    # Adicionar campos adicionais
    dados_completos = dados_avaliacao.copy()
    dados_completos['id'] = avaliacao_id
    dados_completos['data_registro'] = agora
    
    # Preparar consulta
    campos = ', '.join(dados_completos.keys())
    placeholders = ', '.join(['?'] * len(dados_completos))
    
    # Executar consulta
    query = f"INSERT INTO avaliacoes ({campos}) VALUES ({placeholders})"
    valores = list(dados_completos.values())
    
    cursor.execute(query, valores)
    conn.commit()
    
    # Registrar log
    usuario = st.session_state.usuario if 'usuario' in st.session_state else 'Sistema'
    registrar_log(usuario, 'Inserir', 'avaliacoes', avaliacao_id, f"Nova avalia√ß√£o: Paciente {dados_avaliacao['paciente_id']}")
    
    conn.close()
    
    return avaliacao_id

def inserir_agendamento(dados_agendamento):
    """Insere um novo agendamento no banco de dados"""
    conn = sqlite3.connect('dados/neurobase.db')
    cursor = conn.cursor()
    
    # Gerar ID √∫nico
    agendamento_id = str(uuid.uuid4())
    agora = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    # Adicionar campos adicionais
    dados_completos = dados_agendamento.copy()
    dados_completos['id'] = agendamento_id
    dados_completos['data_registro'] = agora
    
    # Preparar consulta
    campos = ', '.join(dados_completos.keys())
    placeholders = ', '.join(['?'] * len(dados_completos))
    
    # Executar consulta
    query = f"INSERT INTO agendamentos ({campos}) VALUES ({placeholders})"
    valores = list(dados_completos.values())
    
    cursor.execute(query, valores)
    conn.commit()
    
    # Registrar log
    usuario = st.session_state.usuario if 'usuario' in st.session_state else 'Sistema'
    registrar_log(usuario, 'Inserir', 'agendamentos', agendamento_id, f"Novo agendamento: Paciente {dados_agendamento['paciente_id']}")
    
    conn.close()
    
    return agendamento_id

def atualizar_agendamento(agendamento_id, dados_atualizados):
    """Atualiza um agendamento existente"""
    conn = sqlite3.connect('dados/neurobase.db')
    cursor = conn.cursor()
    
    # Preparar consulta de atualiza√ß√£o
    set_clause = ', '.join([f"{campo} = ?" for campo in dados_atualizados.keys()])
    query = f"UPDATE agendamentos SET {set_clause} WHERE id = ?"
    
    # Executar consulta
    valores = list(dados_atualizados.values()) + [agendamento_id]
    cursor.execute(query, valores)
    conn.commit()
    
    # Registrar log
    usuario = st.session_state.usuario if 'usuario' in st.session_state else 'Sistema'
    registrar_log(usuario, 'Atualizar', 'agendamentos', agendamento_id, f"Atualiza√ß√£o de agendamento: {', '.join(dados_atualizados.keys())}")
    
    conn.close()
    
    return True

def backup_banco_dados():
    """Cria um backup do banco de dados"""
    import shutil
    import time
    
    # Criar diret√≥rio de backup se n√£o existir
    os.makedirs("dados/backup", exist_ok=True)
    
    # Nome do arquivo de backup
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    backup_file = f"dados/backup/neurobase_{timestamp}.db"
    
    # Fazer c√≥pia do banco de dados
    try:
        shutil.copy2('dados/neurobase.db', backup_file)
        
        # Registrar backup no banco
        conn = sqlite3.connect('dados/neurobase.db')
        cursor = conn.cursor()
        
        backup_id = str(uuid.uuid4())
        agora = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        usuario = st.session_state.usuario if 'usuario' in st.session_state else 'Sistema'
        
        cursor.execute('''
        INSERT INTO backups (id, timestamp, usuario, arquivo, detalhes)
        VALUES (?, ?, ?, ?, ?)
        ''', (backup_id, agora, usuario, backup_file, "Backup autom√°tico"))
        
        conn.commit()
        conn.close()
        
        return True, backup_file
    except Exception as e:
        return False, str(e)

def migrar_dados_csv_para_sqlite():
    """Migra dados de arquivos CSV para o banco SQLite (se necess√°rio)"""
    # Verificar se arquivos CSV existem
    pacientes_file = "dados/pacientes.csv"
    atendimentos_file = "dados/atendimentos.csv"
    avaliacoes_file = "dados/avaliacoes.csv"
    agendamentos_file = "dados/agendamentos.csv"
    
    arquivos = [
        (pacientes_file, "pacientes"), 
        (atendimentos_file, "atendimentos"),
        (avaliacoes_file, "avaliacoes"),
        (agendamentos_file, "agendamentos")
    ]
    
    conn = sqlite3.connect('dados/neurobase.db')
    cursor = conn.cursor()
    
    for arquivo, tabela in arquivos:
        if os.path.exists(arquivo):
            try:
                # Carregar dados do CSV
                df = pd.read_csv(arquivo)
                
                # Verificar se a tabela j√° tem dados
                cursor.execute(f"SELECT COUNT(*) FROM {tabela}")
                count = cursor.fetchone()[0]
                
                if count == 0 and len(df) > 0:
                    # Adicionar ID UUID se n√£o existir
                    if 'id' in df.columns and not isinstance(df['id'].iloc[0], str):
                        df['id'] = [str(uuid.uuid4()) for _ in range(len(df))]
                    
                    # Adicionar campos de data se necess√°rio
                    agora = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    if tabela == "pacientes":
                        if 'data_cadastro' not in df.columns:
                            df['data_cadastro'] = agora
                        if 'ultima_atualizacao' not in df.columns:
                            df['ultima_atualizacao'] = agora
                    else:
                        if 'data_registro' not in df.columns:
                            df['data_registro'] = agora
                    
                    # Inserir dados na tabela SQLite
                    for _, row in df.iterrows():
                        # Limpar NaN
                        row_dict = {k: ('' if pd.isna(v) else v) for k, v in row.to_dict().items()}
                        
                        campos = ', '.join(row_dict.keys())
                        placeholders = ', '.join(['?'] * len(row_dict))
                        valores = list(row_dict.values())
                        
                        cursor.execute(f"INSERT INTO {tabela} ({campos}) VALUES ({placeholders})", valores)
                    
                    conn.commit()
                    print(f"Migrados {len(df)} registros de {arquivo} para a tabela {tabela}")
            except Exception as e:
                print(f"Erro ao migrar dados de {arquivo}: {str(e)}")
    
    conn.close()

def validar_dados_paciente(dados):
    """Valida os dados de um paciente antes de inserir/atualizar"""
    erros = []
    
    # Validar campos obrigat√≥rios
    if not dados.get('nome'):
        erros.append("Nome √© obrigat√≥rio")
    
    # Validar formatos
    if 'email' in dados and dados['email']:
        if '@' not in dados['email']:
            erros.append("E-mail inv√°lido")
    
    if 'telefone' in dados and dados['telefone']:
        # Remover caracteres n√£o num√©ricos para valida√ß√£o
        telefone_limpo = ''.join(c for c in dados['telefone'] if c.isdigit())
        if len(telefone_limpo) < 10:
            erros.append("Telefone inv√°lido (m√≠nimo 10 d√≠gitos)")
    
    # Validar datas
    try:
        if 'data_nascimento' in dados and dados['data_nascimento']:
            datetime.strptime(dados['data_nascimento'], '%Y-%m-%d')
    except ValueError:
        erros.append("Data de nascimento inv√°lida")
    
    try:
        if 'data_entrada' in dados and dados['data_entrada']:
            datetime.strptime(dados['data_entrada'], '%Y-%m-%d')
    except ValueError:
        erros.append("Data de entrada inv√°lida")
    
    return erros

def verificar_login(email, senha):
    """Verifica as credenciais de login"""
    conn = sqlite3.connect('dados/neurobase.db')
    cursor = conn.cursor()
    
    # Codificar senha para compara√ß√£o
    senha_hash = hashlib.sha256(senha.encode()).hexdigest()
    
    # Verificar credenciais
    cursor.execute('''
    SELECT id, nome, email, perfil FROM usuarios 
    WHERE email = ? AND senha_hash = ? AND ativo = 1
    ''', (email, senha_hash))
    
    usuario = cursor.fetchone()
    
    if usuario:
        # Atualizar √∫ltimo acesso
        cursor.execute('''
        UPDATE usuarios SET ultimo_acesso = ? WHERE id = ?
        ''', (datetime.now().strftime('%Y-%m-%d %H:%M:%S'), usuario[0]))
        conn.commit()
        
        # Registrar log de login
        registrar_log(email, 'Login', 'usuarios', usuario[0], "Login bem-sucedido")
        
        usuario_dict = {
            'id': usuario[0],
            'nome': usuario[1],
            'email': usuario[2],
            'perfil': usuario[3]
        }
        
        conn.close()
        return True, usuario_dict
    
    conn.close()
    return False, None

def obter_dados_backup():
    """Obt√©m a lista de backups dispon√≠veis"""
    conn = sqlite3.connect('dados/neurobase.db')
    backups_df = pd.read_sql('''
    SELECT id, timestamp, usuario, arquivo, detalhes FROM backups
    ORDER BY timestamp DESC
    ''', conn)
    conn.close()
    return backups_df

###############################
# FUN√á√ïES DA INTERFACE
###############################

def autenticacao():
    """Interface de autentica√ß√£o do sistema"""
    st.markdown("<h1 class='main-header'>NeuroBase - Sistema de Gest√£o em Psicomotricidade</h1>", unsafe_allow_html=True)
    
    if 'autenticado' in st.session_state and st.session_state.autenticado:
        return True
    
    # Criar colunas para centralizar o formul√°rio de login
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.subheader("Login")
        
        with st.form("login_form"):
            email = st.text_input("E-mail")
            senha = st.text_input("Senha", type="password")
            submit = st.form_submit_button("Entrar")
            
            if submit:
                if email and senha:
                    autenticado, usuario = verificar_login(email, senha)
                    
                    if autenticado:
                        st.session_state.autenticado = True
                        st.session_state.usuario = usuario['nome']
                        st.session_state.usuario_id = usuario['id']
                        st.session_state.usuario_email = usuario['email']
                        st.session_state.perfil = usuario['perfil']
                        
                        # Mensagem de sucesso e redirecionamento
                        st.success(f"Bem-vindo, {usuario['nome']}!")
                        time.sleep(1)
                        st.experimental_rerun()
                        return True
                    else:
                        st.error("E-mail ou senha incorretos.")
                else:
                    st.error("Por favor, preencha todos os campos.")
        
        st.markdown("</div>", unsafe_allow_html=True)
    
    st.markdown("<div class='version-info'>NeuroBase v" + APP_VERSION + "</div>", unsafe_allow_html=True)
    return False

def mostrar_dashboard():
    """Exibe o dashboard principal"""
    st.markdown("<h1 class='main-header'>Dashboard</h1>", unsafe_allow_html=True)
    
    # Carregar dados
    pacientes_df = carregar_pacientes()
    atendimentos_df = carregar_atendimentos()
    avaliacoes_df = carregar_avaliacoes()
    agendamentos_df = carregar_agendamentos()
    
    # M√©tricas principais
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("<div class='metric-card'>", unsafe_allow_html=True)
        st.metric(label="Total Pacientes", value=len(pacientes_df))
        st.markdown("</div>", unsafe_allow_html=True)
    
    with col2:
        st.markdown("<div class='metric-card'>", unsafe_allow_html=True)
        hoje = datetime.now().strftime('%Y-%m-%d')
        atendimentos_hoje = len(atendimentos_df[atendimentos_df['data'] == hoje])
        st.metric(label="Atendimentos Hoje", value=atendimentos_hoje)
        st.markdown("</div>", unsafe_allow_html=True)
    
    with col3:
        st.markdown("<div class='metric-card'>", unsafe_allow_html=True)
        data_limite = (datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d')
        proximas_avaliacoes = len(avaliacoes_df[avaliacoes_df['proxima_avaliacao'] <= data_limite])
        st.metric(label="Avalia√ß√µes Pr√≥x. 30 dias", value=proximas_avaliacoes)
        st.markdown("</div>", unsafe_allow_html=True)
    
    with col4:
        st.markdown("<div class='metric-card'>", unsafe_allow_html=True)
        agendamentos_pendentes = len(agendamentos_df[agendamentos_df['status'].isin(['Agendado', 'Confirmado'])])
        st.metric(label="Agendamentos Pendentes", value=agendamentos_pendentes)
        st.markdown("</div>", unsafe_allow_html=True)
    
    # Agenda do dia
    st.markdown("<h2 class='sub-header'>Agenda do Dia</h2>", unsafe_allow_html=True)
    
    # Tabela de agendamentos do dia
    hoje = datetime.now().strftime('%Y-%m-%d')
    agendamentos_hoje = agendamentos_df[agendamentos_df['data'] == hoje]
    
    if len(agendamentos_hoje) > 0:
        # Juntar com nomes dos pacientes
        agendamentos_hoje = pd.merge(
            agendamentos_hoje,
            pacientes_df[['id', 'nome']],
            left_on='paciente_id',
            right_on='id',
            how='left',
            suffixes=('', '_paciente')
        )
        
        for i, agendamento in agendamentos_hoje.iterrows():
            cor_status = CORES_STATUS.get(agendamento['status'], "#ECEFF1")
            
            st.markdown(
                f"<div style='background-color:{cor_status}; padding:10px; margin:5px; border-radius:5px;'>",
                unsafe_allow_html=True
            )
            
            col1, col2, col3 = st.columns([1, 3, 1])
            
            with col1:
                st.markdown(f"**{agendamento['horario']}**")
            
            with col2:
                nome_paciente = agendamento['nome'] if 'nome' in agendamento else "Paciente n√£o encontrado"
                st.markdown(f"**{nome_paciente}**")
                st.markdown(f"Terapeuta: {agendamento['terapeuta']}")
            
            with col3:
                st.markdown(f"**Status:** {agendamento['status']}")
            
            st.markdown("</div>", unsafe_allow_html=True)
    else:
        st.info("N√£o h√° agendamentos para hoje.")
    
    # Alertas e informa√ß√µes
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("<h2 class='sub-header'>Reavalia√ß√µes Pendentes</h2>", unsafe_allow_html=True)
        
        # Identificar pacientes que precisam de reavalia√ß√£o
        avaliacoes_com_proxima = avaliacoes_df[~avaliacoes_df['proxima_avaliacao'].isna()]
        avaliacoes_pendentes = avaliacoes_com_proxima[avaliacoes_com_proxima['proxima_avaliacao'] <= data_limite]
        
        if len(avaliacoes_pendentes) > 0:
            # Juntar com nomes dos pacientes
            avaliacoes_pendentes = pd.merge(
                avaliacoes_pendentes,
                pacientes_df[['id', 'nome']],
                left_on='paciente_id',
                right_on='id',
                how='left',
                suffixes=('', '_paciente')
            )
            
            for i, avaliacao in avaliacoes_pendentes.iterrows():
                st.markdown("<div class='card'>", unsafe_allow_html=True)
                nome_paciente = avaliacao['nome'] if 'nome' in avaliacao else "Paciente n√£o encontrado"
                st.markdown(f"**{nome_paciente}** - {avaliacao['proxima_avaliacao']}")
                st.markdown(f"Tipo: {avaliacao['tipo_avaliacao']}")
                st.markdown("</div>", unsafe_allow_html=True)
        else:
            st.info("N√£o h√° reavalia√ß√µes pendentes nos pr√≥ximos 30 dias.")
    
    with col2:
        st.markdown("<h2 class='sub-header'>Estat√≠sticas de Atendimentos</h2>", unsafe_allow_html=True)
        
        # Calcular estat√≠sticas de atendimentos dos √∫ltimos 30 dias
        data_inicio = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
        atendimentos_recentes = atendimentos_df[atendimentos_df['data'] >= data_inicio]
        
        if len(atendimentos_recentes) > 0:
            # Contar habilidades trabalhadas
            habilidades_count = {}
            
            for _, atendimento in atendimentos_recentes.iterrows():
                if 'habilidades_trabalhadas' in atendimento and atendimento['habilidades_trabalhadas']:
                    habilidades = [h.strip() for h in str(atendimento['habilidades_trabalhadas']).split(',') if h.strip()]
                    for hab in habilidades:
                        if hab in habilidades_count:
                            habilidades_count[hab] += 1
                        else:
                            habilidades_count[hab] = 1
            
            # Mostrar as 5 habilidades mais trabalhadas
            if habilidades_count:
                habilidades_sorted = sorted(habilidades_count.items(), key=lambda x: x[1], reverse=True)[:5]
                
                # Criar gr√°fico
                fig, ax = plt.subplots(figsize=(10, 4))
                habs, counts = zip(*habilidades_sorted)
                ax.barh(habs, counts, color='purple')
                ax.set_xlabel('N√∫mero de Sess√µes')
                ax.set_title('Habilidades Mais Trabalhadas (30 dias)')
                st.pyplot(fig)
            else:
                st.info("N√£o h√° dados suficientes para an√°lise de habilidades.")
        else:
            st.info("N√£o h√° atendimentos registrados nos √∫ltimos 30 dias.")

def mostrar_pacientes():
    """Exibe a se√ß√£o de gerenciamento de pacientes"""
    st.markdown("<h1 class='main-header'>Pacientes</h1>", unsafe_allow_html=True)
    
    tabs = st.tabs(["Lista de Pacientes", "Cadastrar Novo Paciente", "Ficha do Paciente"])
    
    # Carregar dados dos pacientes
    pacientes_df = carregar_pacientes()
    
    with tabs[0]:  # Lista de Pacientes
        st.markdown("<h2 class='sub-header'>Lista de Pacientes</h2>", unsafe_allow_html=True)
        
        # Filtros de busca
        col1, col2 = st.columns(2)
        with col1:
            filtro_nome = st.text_input("Buscar por nome:", key="filtro_nome_paciente")
        
        with col2:
            filtro_diagnostico = st.text_input("Filtrar por diagn√≥stico:", key="filtro_diagnostico")
        
        # Aplicar filtros
        pacientes_filtrados = pacientes_df
        
        if filtro_nome:
            pacientes_filtrados = pacientes_filtrados[pacientes_filtrados['nome'].str.contains(filtro_nome, case=False, na=False)]
        
        if filtro_diagnostico:
            pacientes_filtrados = pacientes_filtrados[pacientes_filtrados['diagnostico'].str.contains(filtro_diagnostico, case=False, na=False)]
        
        # Exibir pacientes
        if len(pacientes_filtrados) > 0:
            for i, paciente in pacientes_filtrados.iterrows():
                col1, col2, col3 = st.columns([1, 3, 1])
                
                with col1:
                    if 'foto' in paciente and paciente['foto'] and str(paciente['foto']) != 'nan':
                        try:
                            foto_bytes = base64.b64decode(paciente['foto'])
                            foto_img = Image.open(io.BytesIO(foto_bytes))
                            st.image(foto_img, width=100)
                        except Exception as e:
                            st.image("https://via.placeholder.com/100x100.png?text=Foto", width=100)
                    else:
                        st.image("https://via.placeholder.com/100x100.png?text=Foto", width=100)
                
                with col2:
                    st.subheader(paciente['nome'])
                    
                    if 'data_nascimento' in paciente and paciente['data_nascimento'] and str(paciente['data_nascimento']) != 'nan':
                        try:
                            data_nasc = datetime.strptime(paciente['data_nascimento'], '%Y-%m-%d')
                            idade = (datetime.now() - data_nasc).days // 365
                            st.write(f"Idade: {idade} anos")
                        except:
                            st.write("Data de nascimento n√£o dispon√≠vel")
                    
                    if 'diagnostico' in paciente and paciente['diagnostico'] and str(paciente['diagnostico']) != 'nan':
                        st.write(f"Diagn√≥stico: {paciente['diagnostico']}")
                
                with col3:
                    if st.button("Ver Ficha", key=f"ver_ficha_{paciente['id']}"):
                        st.session_state.paciente_selecionado = paciente['id']
                        st.experimental_rerun()
        else:
            st.info("Nenhum paciente encontrado com os filtros selecionados.")
    
    with tabs[1]:  # Cadastrar Novo Paciente
        st.markdown("<h2 class='sub-header'>Cadastrar Novo Paciente</h2>", unsafe_allow_html=True)
        
        with st.form("form_cadastro_paciente"):
            col1, col2 = st.columns(2)
            
            with col1:
                nome = st.text_input("Nome completo*")
                data_nascimento = st.date_input("Data de nascimento")
                responsavel = st.text_input("Nome do respons√°vel")
                telefone = st.text_input("Telefone de contato")
                email = st.text_input("E-mail")
            
            with col2:
                diagnostico = st.text_input("Diagn√≥stico")
                nivel_suporte = st.selectbox("N√≠vel de suporte (em caso de TEA)", 
                                           ["", "N√≠vel 1", "N√≠vel 2", "N√≠vel 3"])
                data_entrada = st.date_input("Data de entrada na cl√≠nica", value=datetime.now())
                foto = st.file_uploader("Foto do paciente", type=["jpg", "jpeg", "png"])
            
            st.markdown("### Prefer√™ncias e informa√ß√µes importantes")
            col1, col2 = st.columns(2)
            
            with col1:
                preferencias = st.text_area("Coisas que gosta")
                coisas_acalmam = st.text_area("Coisas que o acalmam")
            
            with col2:
                nao_gosta = st.text_area("Coisas que n√£o gosta")
                gatilhos = st.text_area("Coisas que o deixam nervoso")
            
            brinquedos_favoritos = st.text_area("Brinquedos favoritos (em ordem de prefer√™ncia)")
            
            st.markdown("(*) Campos obrigat√≥rios")
            submitted = st.form_submit_button("Cadastrar Paciente")
            
            if submitted:
                # Validar dados
                dados_paciente = {
                    'nome': nome,
                    'data_nascimento': data_nascimento.strftime('%Y-%m-%d'),
                    'responsavel': responsavel,
                    'telefone': telefone,
                    'email': email,
                    'data_entrada': data_entrada.strftime('%Y-%m-%d'),
                    'diagnostico': diagnostico,
                    'nivel_suporte': nivel_suporte,
                    'preferencias': preferencias,
                    'coisas_acalmam': coisas_acalmam,
                    'nao_gosta': nao_gosta,
                    'gatilhos': gatilhos,
                    'brinquedos_favoritos': brinquedos_favoritos
                }
                
                # Processar foto
                if foto is not None:
                    foto_bytes = foto.getvalue()
                    foto_base64 = base64.b64encode(foto_bytes).decode()
                    dados_paciente['foto'] = foto_base64
                
                erros = validar_dados_paciente(dados_paciente)
                
                if erros:
                    for erro in erros:
                        st.error(erro)
                else:
                    # Inserir paciente no banco
                    paciente_id = inserir_paciente(dados_paciente)
                    
                    st.success(f"Paciente {nome} cadastrado com sucesso!")
                    time.sleep(1)
                    st.session_state.paciente_selecionado = paciente_id
                    st.experimental_rerun()
    
    with tabs[2]:  # Ficha do Paciente
        st.markdown("<h2 class='sub-header'>Ficha do Paciente</h2>", unsafe_allow_html=True)
        
        if 'paciente_selecionado' in st.session_state:
            paciente_id = st.session_state.paciente_selecionado
            
            # Buscar paciente no banco
            paciente_data = pacientes_df[pacientes_df['id'] == paciente_id]
            
            if len(paciente_data) > 0:
                paciente = paciente_data.iloc[0]
                
                st.markdown(f"<h3>{paciente['nome']}</h3>", unsafe_allow_html=True)
                
                col1, col2 = st.columns([1, 3])
                
                with col1:
                    if 'foto' in paciente and paciente['foto'] and str(paciente['foto']) != 'nan':
                        try:
                            foto_bytes = base64.b64decode(paciente['foto'])
                            foto_img = Image.open(io.BytesIO(foto_bytes))
                            st.image(foto_img, width=200)
                        except Exception as e:
                            st.image("https://via.placeholder.com/200x200.png?text=Foto", width=200)
                    else:
                        st.image("https://via.placeholder.com/200x200.png?text=Foto", width=200)
                
                with col2:
                    st.markdown("### Informa√ß√µes Pessoais")
                    if 'data_nascimento' in paciente and paciente['data_nascimento'] and str(paciente['data_nascimento']) != 'nan':
                        try:
                            data_nasc = datetime.strptime(paciente['data_nascimento'], '%Y-%m-%d')
                            idade = (datetime.now() - data_nasc).days // 365
                            st.write(f"**Idade:** {idade} anos")
                        except:
                            st.write("**Data de Nascimento:** N√£o dispon√≠vel")
                    
                    st.write(f"**Respons√°vel:** {paciente['responsavel']}")
                    st.write(f"**Contato:** {paciente['telefone']}")
                    st.write(f"**E-mail:** {paciente['email']}")
                    st.write(f"**Data de Entrada:** {paciente['data_entrada']}")
                    st.write(f"**Diagn√≥stico:** {paciente['diagnostico']}")
                    if 'nivel_suporte' in paciente and paciente['nivel_suporte'] and str(paciente['nivel_suporte']) != 'nan':
                        st.write(f"**N√≠vel de Suporte:** {paciente['nivel_suporte']}")
                
                st.markdown("---")
                st.markdown("### Prefer√™ncias e Comportamento")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("<div class='card'>", unsafe_allow_html=True)
                    st.markdown("#### üòä Coisas que gosta")
                    if 'preferencias' in paciente and paciente['preferencias'] and str(paciente['preferencias']) != 'nan':
                        st.write(paciente['preferencias'])
                    st.markdown("</div>", unsafe_allow_html=True)
                    
                    st.markdown("<div class='card'>", unsafe_allow_html=True)
                    st.markdown("#### üòå Coisas que o acalmam")
                    if 'coisas_acalmam' in paciente and paciente['coisas_acalmam'] and str(paciente['coisas_acalmam']) != 'nan':
                        st.write(paciente['coisas_acalmam'])
                    st.markdown("</div>", unsafe_allow_html=True)
                
                with col2:
                    st.markdown("<div class='card'>", unsafe_allow_html=True)
                    st.markdown("#### üòï Coisas que n√£o gosta")
                    if 'nao_gosta' in paciente and paciente['nao_gosta'] and str(paciente['nao_gosta']) != 'nan':
                        st.write(paciente['nao_gosta'])
                    st.markdown("</div>", unsafe_allow_html=True)
                    
                    st.markdown("<div class='card'>", unsafe_allow_html=True)
                    st.markdown("#### üò† Gatilhos")
                    if 'gatilhos' in paciente and paciente['gatilhos'] and str(paciente['gatilhos']) != 'nan':
                        st.write(paciente['gatilhos'])
                    st.markdown("</div>", unsafe_allow_html=True)
                
                st.markdown("<div class='card'>", unsafe_allow_html=True)
                st.markdown("#### üß∏ Brinquedos favoritos")
                if 'brinquedos_favoritos' in paciente and paciente['brinquedos_favoritos'] and str(paciente['brinquedos_favoritos']) != 'nan':
                    st.write(paciente['brinquedos_favoritos'])
                st.markdown("</div>", unsafe_allow_html=True)
                
                # Carregar dados relacionados
                atendimentos_df = carregar_atendimentos()
                avaliacoes_df = carregar_avaliacoes()
                agendamentos_df = carregar_agendamentos()
                
                # Filtrar por paciente
                atendimentos_paciente = atendimentos_df[atendimentos_df['paciente_id'] == paciente_id]
                avaliacoes_paciente = avaliacoes_df[avaliacoes_df['paciente_id'] == paciente_id]
                agendamentos_paciente = agendamentos_df[agendamentos_df['paciente_id'] == paciente_id]
                
                # Abas para hist√≥rico
                paciente_tabs = st.tabs(["Atendimentos", "Avalia√ß√µes", "Agendamentos"])
                
                with paciente_tabs[0]:  # Atendimentos
                    st.markdown("### Hist√≥rico de Atendimentos")
                    
                    if len(atendimentos_paciente) > 0:
                        atendimentos_paciente = atendimentos_paciente.sort_values('data', ascending=False)
                        
                        for _, atendimento in atendimentos_paciente.iterrows():
                            st.markdown(f"<div class='card'>", unsafe_allow_html=True)
                            st.markdown(f"#### {atendimento['data']} - Terapeuta: {atendimento['terapeuta']}")
                            
                            st.markdown("**Habilidades trabalhadas:**")
                            if 'habilidades_trabalhadas' in atendimento and atendimento['habilidades_trabalhadas'] and str(atendimento['habilidades_trabalhadas']) != 'nan':
                                habilidades_list = str(atendimento['habilidades_trabalhadas']).split(',')
                                for hab in habilidades_list:
                                    st.markdown(f"<span class='skill-tag'>{hab.strip()}</span>", unsafe_allow_html=True)
                            
                            with st.expander("Ver detalhes"):
                                st.markdown("**Evolu√ß√£o:**")
                                if 'evolucao' in atendimento and atendimento['evolucao'] and str(atendimento['evolucao']) != 'nan':
                                    st.write(atendimento['evolucao'])
                                
                                if 'comportamentos' in atendimento and atendimento['comportamentos'] and str(atendimento['comportamentos']) != 'nan':
                                    st.markdown("**Comportamentos:**")
                                    st.write(atendimento['comportamentos'])
                            
                            st.markdown("</div>", unsafe_allow_html=True)
                    else:
                        st.info("N√£o h√° registros de atendimentos para este paciente.")
                
                with paciente_tabs[1]:  # Avalia√ß√µes
                    st.markdown("### Avalia√ß√µes")
                    
                    if len(avaliacoes_paciente) > 0:
                        avaliacoes_paciente = avaliacoes_paciente.sort_values('data', ascending=False)
                        
                        for _, avaliacao in avaliacoes_paciente.iterrows():
                            st.markdown(f"<div class='card'>", unsafe_allow_html=True)
                            st.markdown(f"#### {avaliacao['data']} - {avaliacao['tipo_avaliacao']}")
                            st.markdown(f"Terapeuta: {avaliacao['terapeuta']}")
                            
                            with st.expander("Ver resultados"):
                                st.markdown("**Resultados:**")
                                if 'resultados' in avaliacao and avaliacao['resultados'] and str(avaliacao['resultados']) != 'nan':
                                    st.write(avaliacao['resultados'])
                                
                                st.markdown("**Recomenda√ß√µes:**")
                                if 'recomendacoes' in avaliacao and avaliacao['recomendacoes'] and str(avaliacao['recomendacoes']) != 'nan':
                                    st.write(avaliacao['recomendacoes'])
                                
                                if 'proxima_avaliacao' in avaliacao and avaliacao['proxima_avaliacao'] and str(avaliacao['proxima_avaliacao']) != 'nan':
                                    st.markdown(f"**Pr√≥xima avalia√ß√£o programada:** {avaliacao['proxima_avaliacao']}")
                            
                            st.markdown("</div>", unsafe_allow_html=True)
                    else:
                        st.info("N√£o h√° registros de avalia√ß√µes para este paciente.")
                
                with paciente_tabs[2]:  # Agendamentos
                    st.markdown("### Pr√≥ximos Agendamentos")
                    
                    hoje = datetime.now().strftime('%Y-%m-%d')
                    agendamentos_futuros = agendamentos_paciente[agendamentos_paciente['data'] >= hoje]
                    
                    if len(agendamentos_futuros) > 0:
                        agendamentos_futuros = agendamentos_futuros.sort_values('data')
                        
                        for _, agendamento in agendamentos_futuros.iterrows():
                            cor_status = CORES_STATUS.get(agendamento['status'], "#ECEFF1")
                            
                            st.markdown(
                                f"<div style='background-color:{cor_status}; padding:10px; margin:5px; border-radius:5px;'>",
                                unsafe_allow_html=True
                            )
                            
                            col1, col2, col3 = st.columns([1, 2, 1])
                            
                            with col1:
                                st.markdown(f"**{agendamento['data']}**")
                                st.markdown(f"**{agendamento['horario']}**")
                            
                            with col2:
                                st.markdown(f"Terapeuta: {agendamento['terapeuta']}")
                                if 'observacao' in agendamento and agendamento['observacao'] and str(agendamento['observacao']) != 'nan':
                                    st.markdown(f"Obs: {agendamento['observacao']}")
                            
                            with col3:
                                st.markdown(f"**Status:** {agendamento['status']}")
                            
                            st.markdown("</div>", unsafe_allow_html=True)
                        
                        st.markdown("### Hist√≥rico de Agendamentos")
                        agendamentos_passados = agendamentos_paciente[agendamentos_paciente['data'] < hoje]
                        
                        if len(agendamentos_passados) > 0:
                            agendamentos_passados = agendamentos_passados.sort_values('data', ascending=False)
                            st.dataframe(agendamentos_passados[['data', 'horario', 'terapeuta', 'status']])
                        else:
                            st.info("N√£o h√° hist√≥rico de agendamentos para este paciente.")
                    else:
                        st.info("N√£o h√° agendamentos futuros para este paciente.")
                        
                        st.markdown("### Hist√≥rico de Agendamentos")
                        agendamentos_passados = agendamentos_paciente[agendamentos_paciente['data'] < hoje]
                        
                        if len(agendamentos_passados) > 0:
                            agendamentos_passados = agendamentos_passados.sort_values('data', ascending=False)
                            st.dataframe(agendamentos_passados[['data', 'horario', 'terapeuta', 'status']])
                        else:
                            st.info("N√£o h√° hist√≥rico de agendamentos para este paciente.")
            else:
                st.error("Paciente n√£o encontrado.")
        else:
            st.info("Selecione um paciente na lista para visualizar sua ficha.")

def mostrar_atendimentos():
    """Exibe a se√ß√£o de gerenciamento de atendimentos"""
    st.markdown("<h1 class='main-header'>Registro de Atendimentos</h1>", unsafe_allow_html=True)
    
    tabs = st.tabs(["Novo Atendimento", "Hist√≥rico de Atendimentos", "An√°lise de Habilidades"])
    
    # Carregar dados
    pacientes_df = carregar_pacientes()
    atendimentos_df = carregar_atendimentos()
    
    with tabs[0]:  # Novo Atendimento
        st.markdown("<h2 class='sub-header'>Registrar Novo Atendimento</h2>", unsafe_allow_html=True)
        
        with st.form("form_atendimento"):
            # Sele√ß√£o de paciente
            paciente_id = st.selectbox(
                "Selecione o Paciente*",
                options=pacientes_df['id'].tolist(),
                format_func=lambda x: pacientes_df[pacientes_df['id'] == x]['nome'].iloc[0] if x in pacientes_df['id'].values else "Paciente n√£o encontrado"
            )
            
            col1, col2 = st.columns(2)
            
            with col1:
                data_atendimento = st.date_input("Data do Atendimento*", value=datetime.now())
                terapeuta = st.text_input("Terapeuta Respons√°vel*", value=st.session_state.usuario if 'usuario' in st.session_state else "")
            
            # Sistema de sele√ß√£o de habilidades trabalhadas
            st.markdown("### Habilidades trabalhadas")
            
            # Lista para armazenar habilidades selecionadas
            if 'habilidades_selecionadas' not in st.session_state:
                st.session_state.habilidades_selecionadas = []
            
            # Interface para sele√ß√£o de habilidades por categoria
            categorias = list(HABILIDADES_PSICOMOTORAS.keys())
            categoria_selecionada = st.selectbox("Categoria de Habilidade", categorias)
            
            if categoria_selecionada:
                habilidades_categoria = HABILIDADES_PSICOMOTORAS[categoria_selecionada]
                
                st.markdown("Selecione as habilidades trabalhadas nesta sess√£o:")
                cols = st.columns(3)
                for i, habilidade in enumerate(habilidades_categoria):
                    col_idx = i % 3
                    with cols[col_idx]:
                        key = f"{categoria_selecionada}_{habilidade}"
                        if st.checkbox(habilidade, key=key):
                            if habilidade not in st.session_state.habilidades_selecionadas:
                                st.session_state.habilidades_selecionadas.append(habilidade)
                        elif habilidade in st.session_state.habilidades_selecionadas:
                            st.session_state.habilidades_selecionadas.remove(habilidade)
            
            st.markdown("### Habilidades selecionadas:")
            habilidades_html = ""
            for hab in st.session_state.habilidades_selecionadas:
                habilidades_html += f"<span class='skill-tag skill-tag-selected'>{hab}</span>"
            
            st.markdown(habilidades_html, unsafe_allow_html=True)
            
            # Limpar sele√ß√£o
            if st.button("Limpar todas as habilidades"):
                st.session_state.habilidades_selecionadas = []
                st.experimental_rerun()
            
            # Descri√ß√£o e evolu√ß√£o do atendimento
            st.markdown("### Detalhes do Atendimento")
            descricao = st.text_area("Descri√ß√£o das atividades realizadas", height=100)
            evolucao = st.text_area("Evolu√ß√£o observada", height=150)
            comportamentos = st.text_area("Comportamentos observados", height=100)
            
            st.markdown("(*) Campos obrigat√≥rios")
            submitted = st.form_submit_button("Registrar Atendimento")
            
            if submitted:
                # Verificar campos obrigat√≥rios
                if not paciente_id or not data_atendimento or not terapeuta:
                    st.error("Por favor, preencha todos os campos obrigat√≥rios.")
                else:
                    # Preparar dados
                    dados_atendimento = {
                        'paciente_id': paciente_id,
                        'data': data_atendimento.strftime('%Y-%m-%d'),
                        'terapeuta': terapeuta,
                        'habilidades_trabalhadas': ', '.join(st.session_state.habilidades_selecionadas),
                        'descricao': descricao,
                        'evolucao': evolucao,
                        'comportamentos': comportamentos
                    }
                    
                    # Inserir no banco
                    atendimento_id = inserir_atendimento(dados_atendimento)
                    
                    # Limpar habilidades selecionadas
                    st.session_state.habilidades_selecionadas = []
                    
                    st.success("Atendimento registrado com sucesso!")
                    time.sleep(1)
                    st.experimental_rerun()
    
    with tabs[1]:  # Hist√≥rico de Atendimentos
        st.markdown("<h2 class='sub-header'>Hist√≥rico de Atendimentos</h2>", unsafe_allow_html=True)
        
        # Filtros
        col1, col2, col3 = st.columns(3)
        
        with col1:
            filtro_paciente = st.selectbox(
                "Filtrar por Paciente",
                options=["Todos"] + pacientes_df['id'].tolist(),
                format_func=lambda x: "Todos os pacientes" if x == "Todos" else pacientes_df[pacientes_df['id'] == x]['nome'].iloc[0] if x in pacientes_df['id'].values else "Paciente n√£o encontrado"
            )
        
        with col2:
            filtro_terapeuta = st.text_input("Filtrar por Terapeuta")
        
        with col3:
            periodo = st.date_input(
                "Per√≠odo (In√≠cio, Fim)",
                [datetime.now() - timedelta(days=30), datetime.now()],
                max_value=datetime.now()
            )
        
        # Aplicar filtros
        atendimentos_filtrados = atendimentos_df
        
        if filtro_paciente != "Todos":
            atendimentos_filtrados = atendimentos_filtrados[atendimentos_filtrados['paciente_id'] == filtro_paciente]
        
        if filtro_terapeuta:
            atendimentos_filtrados = atendimentos_filtrados[atendimentos_filtrados['terapeuta'].str.contains(filtro_terapeuta, case=False, na=False)]
        
        # Filtrar por per√≠odo
        if len(periodo) == 2:
            inicio, fim = periodo
            atendimentos_filtrados = atendimentos_filtrados[
                (atendimentos_filtrados['data'] >= inicio.strftime('%Y-%m-%d')) & 
                (atendimentos_filtrados['data'] <= fim.strftime('%Y-%m-%d'))
            ]
        
        # Exibir resultados
        if len(atendimentos_filtrados) > 0:
            atendimentos_filtrados = atendimentos_filtrados.sort_values('data', ascending=False)
            
            # Juntar com nomes dos pacientes
            atendimentos_completos = pd.merge(
                atendimentos_filtrados,
                pacientes_df[['id', 'nome']],
                left_on='paciente_id',
                right_on='id',
                how='left',
                suffixes=('', '_paciente')
            )
            
            for _, atendimento in atendimentos_completos.iterrows():
                st.markdown(f"<div class='card'>", unsafe_allow_html=True)
                
                col1, col2 = st.columns([1, 3])
                
                with col1:
                    st.markdown(f"**{atendimento['data']}**")
                
                with col2:
                    nome_paciente = atendimento['nome'] if 'nome' in atendimento else "Paciente n√£o encontrado"
                    st.markdown(f"**{nome_paciente}**")
                    st.markdown(f"Terapeuta: {atendimento['terapeuta']}")
                
                st.markdown("**Habilidades trabalhadas:**")
                if 'habilidades_trabalhadas' in atendimento and atendimento['habilidades_trabalhadas'] and str(atendimento['habilidades_trabalhadas']) != 'nan':
                    habilidades_list = str(atendimento['habilidades_trabalhadas']).split(',')
                    habilidades_html = ""
                    for hab in habilidades_list:
                        hab = hab.strip()
                        if hab:
                            habilidades_html += f"<span class='skill-tag'>{hab}</span>"
                    st.markdown(habilidades_html, unsafe_allow_html=True)
                
                with st.expander("Ver detalhes do atendimento"):
                    st.markdown("**Descri√ß√£o das atividades:**")
                    if 'descricao' in atendimento and atendimento['descricao'] and str(atendimento['descricao']) != 'nan':
                        st.write(atendimento['descricao'])
                    
                    st.markdown("**Evolu√ß√£o observada:**")
                    if 'evolucao' in atendimento and atendimento['evolucao'] and str(atendimento['evolucao']) != 'nan':
                        st.write(atendimento['evolucao'])
                    
                    if 'comportamentos' in atendimento and atendimento['comportamentos'] and str(atendimento['comportamentos']) != 'nan':
                        st.markdown("**Comportamentos observados:**")
                        st.write(atendimento['comportamentos'])
                
                st.markdown("</div>", unsafe_allow_html=True)
        else:
            st.info("Nenhum atendimento encontrado com os filtros selecionados.")
    
    with tabs[2]:  # An√°lise de Habilidades
        st.markdown("<h2 class='sub-header'>An√°lise de Habilidades Trabalhadas</h2>", unsafe_allow_html=True)
        
        # Filtros
        col1, col2 = st.columns(2)
        
        with col1:
            paciente_analise = st.selectbox(
                "Selecione o Paciente",
                options=["Todos"] + pacientes_df['id'].tolist(),
                format_func=lambda x: "Todos os pacientes" if x == "Todos" else pacientes_df[pacientes_df['id'] == x]['nome'].iloc[0] if x in pacientes_df['id'].values else "Paciente n√£o encontrado",
                key="paciente_analise"
            )
        
        with col2:
            periodo_analise = st.selectbox(
                "Per√≠odo de An√°lise",
                options=["√öltimo m√™s", "√öltimos 3 meses", "√öltimos 6 meses", "√öltimo ano"]
            )
        
        if st.button("Gerar An√°lise"):
            # Determinar per√≠odo de an√°lise
            hoje = datetime.now()
            if periodo_analise == "√öltimo m√™s":
                data_inicio = (hoje - timedelta(days=30)).strftime('%Y-%m-%d')
            elif periodo_analise == "√öltimos 3 meses":
                data_inicio = (hoje - timedelta(days=90)).strftime('%Y-%m-%d')
            elif periodo_analise == "√öltimos 6 meses":
                data_inicio = (hoje - timedelta(days=180)).strftime('%Y-%m-%d')
            else:  # √öltimo ano
                data_inicio = (hoje - timedelta(days=365)).strftime('%Y-%m-%d')
            
            # Filtrar atendimentos
            atendimentos_periodo = atendimentos_df[atendimentos_df['data'] >= data_inicio]
            
            if paciente_analise != "Todos":
                atendimentos_periodo = atendimentos_periodo[atendimentos_periodo['paciente_id'] == paciente_analise]
                paciente_nome = pacientes_df[pacientes_df['id'] == paciente_analise]['nome'].iloc[0]
                st.markdown(f"### An√°lise para: {paciente_nome}")
            else:
                st.markdown("### An√°lise para todos os pacientes")
            
            st.markdown(f"**Per√≠odo:** {data_inicio} at√© hoje")
            st.markdown(f"**Total de atendimentos analisados:** {len(atendimentos_periodo)}")
            
            if len(atendimentos_periodo) > 0:
                # Analisar habilidades trabalhadas
                habilidades_count = {}
                
                for _, atendimento in atendimentos_periodo.iterrows():
                    if 'habilidades_trabalhadas' in atendimento and atendimento['habilidades_trabalhadas'] and str(atendimento['habilidades_trabalhadas']) != 'nan':
                        habilidades = [h.strip() for h in str(atendimento['habilidades_trabalhadas']).split(',') if h.strip()]
                        for hab in habilidades:
                            if hab in habilidades_count:
                                habilidades_count[hab] += 1
                            else:
                                habilidades_count[hab] = 1
                
                if habilidades_count:
                    # Ordenar por frequ√™ncia
                    habilidades_sorted = sorted(habilidades_count.items(), key=lambda x: x[1], reverse=True)
                    
                    # Limitar para as 15 principais
                    top_habilidades = habilidades_sorted[:15]
                    
                    # Criar gr√°fico
                    fig, ax = plt.subplots(figsize=(12, 8))
                    habs, counts = zip(*top_habilidades)
                    ax.barh(habs, counts, color='purple')
                    ax.set_xlabel('N√∫mero de Sess√µes')
                    ax.set_title('Habilidades Mais Trabalhadas no Per√≠odo')
                    st.pyplot(fig)
                    
                    # An√°lise por categoria
                    st.markdown("### An√°lise por Categoria de Habilidade")
                    
                    # Agrupar habilidades por categoria
                    categorias_count = {}
                    for hab, count in habilidades_count.items():
                        categoria_encontrada = False
                        for categoria, habilidades in HABILIDADES_PSICOMOTORAS.items():
                            if hab in habilidades:
                                if categoria in categorias_count:
                                    categorias_count[categoria] += count
                                else:
                                    categorias_count[categoria] = count
                                categoria_encontrada = True
                                break
                        
                        if not categoria_encontrada:
                            if "Outras" in categorias_count:
                                categorias_count["Outras"] += count
                            else:
                                categorias_count["Outras"] = count
                    
                    # Criar gr√°fico de categorias
                    if categorias_count:
                        categorias_sorted = sorted(categorias_count.items(), key=lambda x: x[1], reverse=True)
                        
                        fig, ax = plt.subplots(figsize=(10, 6))
                        cats, counts = zip(*categorias_sorted)
                        ax.bar(cats, counts, color='purple')
                        ax.set_ylabel('N√∫mero de Sess√µes')
                        ax.set_title('Categorias de Habilidades Trabalhadas')
                        plt.xticks(rotation=45, ha='right')
                        plt.tight_layout()
                        st.pyplot(fig)
                        
                        # Recomenda√ß√µes
                        st.markdown("### Recomenda√ß√µes de Balanceamento de Habilidades")
                        
                        # Encontrar categorias menos trabalhadas
                        categorias_menos_trabalhadas = categorias_sorted[-(min(3, len(categorias_sorted))):]
                        
                        st.markdown("Baseado na an√°lise, recomenda-se aumentar o foco nas seguintes categorias:")
                        for cat, count in categorias_menos_trabalhadas:
                            st.markdown(f"- **{cat}**: Trabalhada em apenas {count} sess√µes")
                            st.markdown("  Habilidades espec√≠ficas recomendadas:")
                            if cat in HABILIDADES_PSICOMOTORAS:
                                for hab in HABILIDADES_PSICOMOTORAS[cat][:3]:
                                    st.markdown(f"  - {hab}")
                else:
                    st.warning("N√£o foi poss√≠vel encontrar registros de habilidades trabalhadas no per√≠odo selecionado.")
            else:
                st.info("N√£o h√° atendimentos registrados no per√≠odo selecionado.")

def mostrar_avaliacoes():
    """Exibe a se√ß√£o de gerenciamento de avalia√ß√µes"""
    st.markdown("<h1 class='main-header'>Avalia√ß√µes</h1>", unsafe_allow_html=True)
    
    tabs = st.tabs(["Nova Avalia√ß√£o", "Lista de Avalia√ß√µes", "Acompanhamento"])
    
    # Carregar dados
    pacientes_df = carregar_pacientes()
    avaliacoes_df = carregar_avaliacoes()
    
    with tabs[0]:  # Nova Avalia√ß√£o
        st.markdown("<h2 class='sub-header'>Registrar Nova Avalia√ß√£o</h2>", unsafe_allow_html=True)
        
        with st.form("form_avaliacao"):
            # Sele√ß√£o de paciente
            paciente_id = st.selectbox(
                "Selecione o Paciente*",
                options=pacientes_df['id'].tolist(),
                format_func=lambda x: pacientes_df[pacientes_df['id'] == x]['nome'].iloc[0] if x in pacientes_df['id'].values else "Paciente n√£o encontrado"
            )
            
            col1, col2 = st.columns(2)
            
            with col1:
                data_avaliacao = st.date_input("Data da Avalia√ß√£o*", value=datetime.now())
                tipo_avaliacao = st.selectbox("Tipo de Avalia√ß√£o*", options=TIPOS_AVALIACAO)
            
            with col2:
                terapeuta = st.text_input("Avaliador*", value=st.session_state.usuario if 'usuario' in st.session_state else "")
                proxima_avaliacao = st.date_input("Data para pr√≥xima avalia√ß√£o", value=datetime.now() + timedelta(days=180))
            
            # √Åreas avaliadas
            st.markdown("### √Åreas Avaliadas")
            
            areas_avaliadas = {}
            pontuacoes = {}
            
            for categoria, habilidades in HABILIDADES_PSICOMOTORAS.items():
                with st.expander(f"Avaliar: {categoria}"):
                    for habilidade in habilidades:
                        col1, col2 = st.columns([3, 1])
                        with col1:
                            st.markdown(f"**{habilidade}**")
                        with col2:
                            nivel = st.selectbox(
                                "N√≠vel",
                                options=[""] + NIVEIS_DESENVOLVIMENTO,
                                key=f"nivel_{habilidade}"
                            )
                            if nivel:
                                areas_avaliadas[habilidade] = nivel
                                pontuacoes[habilidade] = NIVEIS_DESENVOLVIMENTO.index(nivel) + 1
            
            # Resultados e recomenda√ß√µes
            st.markdown("### Resultados e Recomenda√ß√µes")
            resultados = st.text_area("Resultados da avalia√ß√£o", height=150)
            recomendacoes = st.text_area("Recomenda√ß√µes", height=150)
            
            st.markdown("(*) Campos obrigat√≥rios")
            submitted = st.form_submit_button("Registrar Avalia√ß√£o")
            
            if submitted:
                # Verificar campos obrigat√≥rios
                if not paciente_id or not data_avaliacao or not tipo_avaliacao or not terapeuta:
                    st.error("Por favor, preencha todos os campos obrigat√≥rios.")
                else:
                    # Preparar dados
                    dados_avaliacao = {
                        'paciente_id': paciente_id,
                        'data': data_avaliacao.strftime('%Y-%m-%d'),
                        'tipo_avaliacao': tipo_avaliacao,
                        'terapeuta': terapeuta,
                        'resultados': resultados,
                        'recomendacoes': recomendacoes,
                        'proxima_avaliacao': proxima_avaliacao.strftime('%Y-%m-%d'),
                        'areas_avaliadas': json.dumps(areas_avaliadas),
                        'pontuacao': json.dumps(pontuacoes)
                    }
                    
                    # Inserir no banco
                    avaliacao_id = inserir_avaliacao(dados_avaliacao)
                    
                    st.success("Avalia√ß√£o registrada com sucesso!")
                    time.sleep(1)
                    st.experimental_rerun()
    
    with tabs[1]:  # Lista de Avalia√ß√µes
        st.markdown("<h2 class='sub-header'>Lista de Avalia√ß√µes</h2>", unsafe_allow_html=True)
        
        # Filtros
        col1, col2, col3 = st.columns(3)
        
        with col1:
            filtro_paciente = st.selectbox(
                "Filtrar por Paciente",
                options=["Todos"] + pacientes_df['id'].tolist(),
                format_func=lambda x: "Todos os pacientes" if x == "Todos" else pacientes_df[pacientes_df['id'] == x]['nome'].iloc[0] if x in pacientes_df['id'].values else "Paciente n√£o encontrado",
                key="filtro_paciente_avaliacoes"
            )
        
        with col2:
            filtro_tipo = st.selectbox(
                "Filtrar por Tipo",
                options=["Todos"] + TIPOS_AVALIACAO
            )
        
        with col3:
            periodo = st.date_input(
                "Per√≠odo (In√≠cio, Fim)",
                [datetime.now() - timedelta(days=365), datetime.now()],
                max_value=datetime.now(),
                key="periodo_avaliacoes"
            )
        
        # Aplicar filtros
        avaliacoes_filtradas = avaliacoes_df
        
        if filtro_paciente != "Todos":
            avaliacoes_filtradas = avaliacoes_filtradas[avaliacoes_filtradas['paciente_id'] == filtro_paciente]
        
        if filtro_tipo != "Todos":
            avaliacoes_filtradas = avaliacoes_filtradas[avaliacoes_filtradas['tipo_avaliacao'] == filtro_tipo]
        
        # Filtrar por per√≠odo
        if len(periodo) == 2:
            inicio, fim = periodo
            avaliacoes_filtradas = avaliacoes_filtradas[
                (avaliacoes_filtradas['data'] >= inicio.strftime('%Y-%m-%d')) & 
                (avaliacoes_filtradas['data'] <= fim.strftime('%Y-%m-%d'))
            ]
        
        # Exibir resultados
        if len(avaliacoes_filtradas) > 0:
            avaliacoes_filtradas = avaliacoes_filtradas.sort_values('data', ascending=False)
            
            # Juntar com nomes dos pacientes
            avaliacoes_completas = pd.merge(
                avaliacoes_filtradas,
                pacientes_df[['id', 'nome']],
                left_on='paciente_id',
                right_on='id',
                how='left',
                suffixes=('', '_paciente')
            )
            
            for _, avaliacao in avaliacoes_completas.iterrows():
                st.markdown(f"<div class='card'>", unsafe_allow_html=True)
                
                col1, col2 = st.columns([1, 3])
                
                with col1:
                    st.markdown(f"**{avaliacao['data']}**")
                    st.markdown(f"**{avaliacao['tipo_avaliacao']}**")
                
                with col2:
                    nome_paciente = avaliacao['nome'] if 'nome' in avaliacao else "Paciente n√£o encontrado"
                    st.markdown(f"**{nome_paciente}**")
                    st.markdown(f"Avaliador: {avaliacao['terapeuta']}")
                    
                    if 'proxima_avaliacao' in avaliacao and avaliacao['proxima_avaliacao'] and str(avaliacao['proxima_avaliacao']) != 'nan':
                        st.markdown(f"Pr√≥xima avalia√ß√£o: {avaliacao['proxima_avaliacao']}")
                
                with st.expander("Ver detalhes da avalia√ß√£o"):
                    if 'areas_avaliadas' in avaliacao and avaliacao['areas_avaliadas'] and str(avaliacao['areas_avaliadas']) != 'nan':
                        st.markdown("#### √Åreas Avaliadas")
                        try:
                            areas = json.loads(avaliacao['areas_avaliadas'])
                            for area, nivel in areas.items():
                                st.markdown(f"- **{area}:** {nivel}")
                        except:
                            st.write("Erro ao carregar √°reas avaliadas")
                    
                    st.markdown("#### Resultados")
                    if 'resultados' in avaliacao and avaliacao['resultados'] and str(avaliacao['resultados']) != 'nan':
                        st.write(avaliacao['resultados'])
                    
                    st.markdown("#### Recomenda√ß√µes")
                    if 'recomendacoes' in avaliacao and avaliacao['recomendacoes'] and str(avaliacao['recomendacoes']) != 'nan':
                        st.write(avaliacao['recomendacoes'])
                
                st.markdown("</div>", unsafe_allow_html=True)
        else:
            st.info("Nenhuma avalia√ß√£o encontrada com os filtros selecionados.")
    
    with tabs[2]:  # Acompanhamento
        st.markdown("<h2 class='sub-header'>Acompanhamento da Evolu√ß√£o</h2>", unsafe_allow_html=True)
        
        # Selecionar paciente para acompanhamento
        paciente_evolucao = st.selectbox(
            "Selecione o Paciente",
            options=pacientes_df['id'].tolist(),
            format_func=lambda x: pacientes_df[pacientes_df['id'] == x]['nome'].iloc[0] if x in pacientes_df['id'].values else "Paciente n√£o encontrado",
            key="paciente_evolucao"
        )
        
        if st.button("Analisar Evolu√ß√£o"):
            # Filtrar avalia√ß√µes do paciente
            avaliacoes_paciente = avaliacoes_df[avaliacoes_df['paciente_id'] == paciente_evolucao]
            
            if len(avaliacoes_paciente) > 0:
                # Ordenar por data
                avaliacoes_paciente = avaliacoes_paciente.sort_values('data')
                
                # Buscar nome do paciente
                paciente_nome = pacientes_df[pacientes_df['id'] == paciente_evolucao]['nome'].iloc[0]
                
                st.markdown(f"### Evolu√ß√£o de {paciente_nome}")
                
                # Extrair pontua√ß√µes
                evolucao_dados = {}
                
                for _, avaliacao in avaliacoes_paciente.iterrows():
                    data = avaliacao['data']
                    
                    if 'pontuacao' in avaliacao and avaliacao['pontuacao'] and str(avaliacao['pontuacao']) != 'nan':
                        try:
                            pontuacoes = json.loads(avaliacao['pontuacao'])
                            
                            for area, pontuacao in pontuacoes.items():
                                if area not in evolucao_dados:
                                    evolucao_dados[area] = []
                                
                                evolucao_dados[area].append((data, pontuacao))
                        except:
                            continue
                
                # Criar gr√°ficos de evolu√ß√£o
                if evolucao_dados:
                    for area, dados in evolucao_dados.items():
                        if len(dados) > 1:  # S√≥ mostrar √°reas com pelo menos 2 avalia√ß√µes
                            st.markdown(f"#### Evolu√ß√£o: {area}")
                            
                            datas = [d[0] for d in dados]
                            valores = [d[1] for d in dados]
                            
                            fig, ax = plt.subplots(figsize=(10, 4))
                            ax.plot(datas, valores, marker='o', linestyle='-', color='purple')
                            ax.set_xlabel('Data')
                            ax.set_ylabel('N√≠vel (1-7)')
                            ax.set_title(f'Evolu√ß√£o em {area}')
                            plt.xticks(rotation=45)
                            plt.grid(True, linestyle='--', alpha=0.7)
                            plt.tight_layout()
                            st.pyplot(fig)
                    
                    # Vis√£o geral das √°reas
                    st.markdown("### Vis√£o Geral da Evolu√ß√£o")
                    
                    # Selecionar √°reas com pelo menos 2 avalia√ß√µes
                    areas_completas = {area: dados for area, dados in evolucao_dados.items() if len(dados) > 1}
                    
                    if areas_completas:
                        # Calcular evolu√ß√£o percentual
                        evolucao_percentual = {}
                        
                        for area, dados in areas_completas.items():
                            primeiro = dados[0][1]
                            ultimo = dados[-1][1]
                            
                            if primeiro > 0:  # Evitar divis√£o por zero
                                evolucao_percentual[area] = (ultimo - primeiro) / primeiro * 100
                            else:
                                evolucao_percentual[area] = 0
                        
                        # Criar gr√°fico de barras
                        fig, ax = plt.subplots(figsize=(12, 6))
                        areas = list(evolucao_percentual.keys())
                        percentuais = list(evolucao_percentual.values())
                        
                        cores = ['green' if p > 0 else 'red' for p in percentuais]
                        ax.bar(areas, percentuais, color=cores)
                        ax.set_xlabel('√Åreas Avaliadas')
                        ax.set_ylabel('Evolu√ß√£o (%)')
                        ax.set_title('Percentual de Evolu√ß√£o por √Årea')
                        plt.xticks(rotation=45, ha='right')
                        plt.grid(True, linestyle='--', alpha=0.7, axis='y')
                        plt.tight_layout()
                        st.pyplot(fig)
                        
                        # Recomenda√ß√µes baseadas na evolu√ß√£o
                        st.markdown("### Recomenda√ß√µes Baseadas na Evolu√ß√£o")
                        
                        # Identificar √°reas com menor evolu√ß√£o
                        areas_ordenadas = sorted(evolucao_percentual.items(), key=lambda x: x[1])
                        areas_menor_evolucao = areas_ordenadas[:min(3, len(areas_ordenadas))]
                        
                        st.markdown("Baseado na an√°lise de evolu√ß√£o, recomenda-se focar nas seguintes √°reas:")
                        for area, percentual in areas_menor_evolucao:
                            st.markdown(f"- **{area}**: Evolu√ß√£o de {percentual:.1f}%")
                else:
                    st.info("N√£o h√° dados suficientes para an√°lise de evolu√ß√£o.")
            else:
                st.info("N√£o h√° avalia√ß√µes suficientes para an√°lise de evolu√ß√£o.")
        else:
            st.info("Selecione um paciente e clique em 'Analisar Evolu√ß√£o' para visualizar o progresso.")

def mostrar_agendamentos():
    """Exibe a se√ß√£o de agendamentos"""
    st.markdown("<h1 class='main-header'>Agendamentos</h1>", unsafe_allow_html=True)
    
    tabs = st.tabs(["Novo Agendamento", "Calend√°rio", "Gest√£o de Agendamentos", "Agrupamentos Sugeridos"])
    
    # Carregar dados
    pacientes_df = carregar_pacientes()
    agendamentos_df = carregar_agendamentos()
    
    with tabs[0]:  # Novo Agendamento
        st.markdown("<h2 class='sub-header'>Agendar Nova Sess√£o</h2>", unsafe_allow_html=True)
        
        with st.form("form_agendamento"):
            # Sele√ß√£o de paciente
            paciente_id = st.selectbox(
                "Selecione o Paciente*",
                options=pacientes_df['id'].tolist(),
                format_func=lambda x: pacientes_df[pacientes_df['id'] == x]['nome'].iloc[0] if x in pacientes_df['id'].values else "Paciente n√£o encontrado",
                key="paciente_agendamento"
            )
            
            col1, col2 = st.columns(2)
            
            with col1:
                data_agendamento = st.date_input("Data da Sess√£o*", min_value=datetime.now())
                horario = st.time_input("Hor√°rio*", value=datetime.now().time().replace(minute=0, second=0, microsecond=0))
            
            with col2:
                terapeuta = st.text_input("Terapeuta Respons√°vel*", value=st.session_state.usuario if 'usuario' in st.session_state else "")
                status = st.selectbox("Status*", options=STATUS_AGENDAMENTO, index=0)
            
            observacao = st.text_area("Observa√ß√µes", height=100)
            
            # Op√ß√µes adicionais
            col1, col2 = st.columns(2)
            with col1:
                gerar_gcal = st.checkbox("Gerar evento no Google Calendar")
            
            with col2:
                notificar_whatsapp = st.checkbox("Notificar respons√°vel via WhatsApp")
            
            st.markdown("(*) Campos obrigat√≥rios")
            submitted = st.form_submit_button("Agendar Sess√£o")
            
            if submitted:
                # Verificar campos obrigat√≥rios
                if not paciente_id or not data_agendamento or not horario or not terapeuta or not status:
                    st.error("Por favor, preencha todos os campos obrigat√≥rios.")
                else:
                    # Preparar dados
                    dados_agendamento = {
                        'paciente_id': paciente_id,
                        'data': data_agendamento.strftime('%Y-%m-%d'),
                        'horario': horario.strftime('%H:%M'),
                        'terapeuta': terapeuta,
                        'status': status,
                        'observacao': observacao
                    }
                    
                    # Inserir no banco
                    agendamento_id = inserir_agendamento(dados_agendamento)
                    
                    # Mensagem de feedback
                    msg = "Sess√£o agendada com sucesso!"
                    
                    if gerar_gcal:
                        msg += " (Google Calendar: simulado)"
                    
                    if notificar_whatsapp:
                        msg += " (WhatsApp: simulado)"
                    
                    st.success(msg)
                    time.sleep(1)
                    st.experimental_rerun()
    
    with tabs[1]:  # Calend√°rio
        st.markdown("<h2 class='sub-header'>Calend√°rio de Agendamentos</h2>", unsafe_allow_html=True)
        
        # Escolher m√™s e ano
        col1, col2 = st.columns(2)
        with col1:
            mes_ano = st.date_input(
                "Selecione o m√™s",
                value=datetime.now().replace(day=1),
                format="MM/YYYY"
            )
        
        with col2:
            filtro_terapeuta = st.text_input("Filtrar por terapeuta")
        
        # Determinar dias do m√™s
        primeiro_dia = mes_ano.replace(day=1)
        if mes_ano.month == 12:
            ultimo_dia = mes_ano.replace(year=mes_ano.year + 1, month=1, day=1) - timedelta(days=1)
        else:
            ultimo_dia = mes_ano.replace(month=mes_ano.month + 1, day=1) - timedelta(days=1)
        
        # Filtrar agendamentos do m√™s
        agendamentos_mes = agendamentos_df[
            (agendamentos_df['data'] >= primeiro_dia.strftime('%Y-%m-%d')) & 
            (agendamentos_df['data'] <= ultimo_dia.strftime('%Y-%m-%d'))
        ]
        
        if filtro_terapeuta:
            agendamentos_mes = agendamentos_mes[agendamentos_mes['terapeuta'].str.contains(filtro_terapeuta, case=False, na=False)]
        
        # Criar visualiza√ß√£o de calend√°rio
        st.markdown("<h3>Vis√£o de Calend√°rio</h3>", unsafe_allow_html=True)
        
        # Simula√ß√£o de interface de calend√°rio
        dias_mes = (ultimo_dia - primeiro_dia).days + 1
        semanas = []
        dia_atual = primeiro_dia
        semana_atual = []
        
        # Preencher dias vazios at√© o primeiro dia do m√™s cair no dia correto da semana
        dia_semana_inicio = primeiro_dia.weekday()
        for _ in range(dia_semana_inicio):
            semana_atual.append(None)
        
        # Preencher os dias do m√™s
        for _ in range(dias_mes):
            semana_atual.append(dia_atual)
            if len(semana_atual) == 7:
                semanas.append(semana_atual)
                semana_atual = []
            dia_atual = dia_atual + timedelta(days=1)
        
        # Preencher o restante da √∫ltima semana se necess√°rio
        if semana_atual:
            while len(semana_atual) < 7:
                semana_atual.append(None)
            semanas.append(semana_atual)
        
        # Exibir calend√°rio
        dias_semana = ["Seg", "Ter", "Qua", "Qui", "Sex", "S√°b", "Dom"]
        
        # Cabe√ßalho dos dias da semana
        cols = st.columns(7)
        for i, dia in enumerate(dias_semana):
            cols[i].markdown(f"<div style='text-align:center'><b>{dia}</b></div>", unsafe_allow_html=True)
        
        # Juntar com nomes dos pacientes
        if len(agendamentos_mes) > 0:
            agendamentos_completos = pd.merge(
                agendamentos_mes,
                pacientes_df[['id', 'nome']],
                left_on='paciente_id',
                right_on='id',
                how='left',
                suffixes=('', '_paciente')
            )
        else:
            agendamentos_completos = pd.DataFrame()
        
        # Exibir semanas
        for semana in semanas:
            cols = st.columns(7)
            for i, dia in enumerate(semana):
                if dia:
                    data_str = dia.strftime('%Y-%m-%d')
                    
                    # Verificar se h√° agendamentos para este dia
                    agendamentos_dia = agendamentos_completos[agendamentos_completos['data'] == data_str] if len(agendamentos_completos) > 0 else pd.DataFrame()
                    num_agendamentos = len(agendamentos_dia)
                    
                    # Estilo para destacar o dia atual
                    estilo = ""
                    if dia.date() == datetime.now().date():
                        estilo = "background-color: #E1BEE7; font-weight: bold;"
                    
                    # Exibir dia e n√∫mero de agendamentos
                    cols[i].markdown(
                        f"<div style='text-align:center; padding:5px; border-radius:5px; {estilo}'>"
                        f"<b>{dia.day}</b><br/>"
                        f"{num_agendamentos} sess√µes"
                        f"</div>",
                        unsafe_allow_html=True
                    )
                    
                    # Se houver agendamentos, exibir eles
                    if num_agendamentos > 0:
                        for _, agendamento in agendamentos_dia.iterrows():
                            # Buscar nome do paciente
                            nome_paciente = agendamento['nome'] if 'nome' in agendamento else "Paciente n√£o encontrado"
                            
                            # Cor baseada no status
                            cor_status = CORES_STATUS.get(agendamento['status'], "#ECEFF1")
                            
                            # Limitar tamanho do nome para ajustar ao layout
                            nome_exibir = nome_paciente[:12] + "..." if len(nome_paciente) > 12 else nome_paciente
                            
                            cols[i].markdown(
                                f"<div style='background-color:{cor_status}; padding:3px; margin:2px; border-radius:3px; font-size:0.8em;'>"
                                f"{agendamento['horario']} - {nome_exibir}</div>",
                                unsafe_allow_html=True
                            )
                else:
                    # Dia vazio
                    cols[i].markdown("", unsafe_allow_html=True)
    
    with tabs[2]:  # Gest√£o de Agendamentos
        st.markdown("<h2 class='sub-header'>Gest√£o de Agendamentos</h2>", unsafe_allow_html=True)
        
        # Filtros
        col1, col2, col3 = st.columns(3)
        
        with col1:
            periodo = st.date_input(
                "Per√≠odo",
                [datetime.now(), datetime.now() + timedelta(days=7)]
            )
        
        with col2:
            filtro_paciente = st.selectbox(
                "Paciente",
                options=["Todos"] + pacientes_df['id'].tolist(),
                format_func=lambda x: "Todos os pacientes" if x == "Todos" else pacientes_df[pacientes_df['id'] == x]['nome'].iloc[0] if x in pacientes_df['id'].values else "Paciente n√£o encontrado",
                key="filtro_agenda_paciente"
            )
        
        with col3:
            filtro_status = st.multiselect(
                "Status",
                options=STATUS_AGENDAMENTO
            )
        
        # Aplicar filtros
        agendamentos_filtrados = agendamentos_df
        
        if len(periodo) == 2:
            inicio, fim = periodo
            agendamentos_filtrados = agendamentos_filtrados[
                (agendamentos_filtrados['data'] >= inicio.strftime('%Y-%m-%d')) & 
                (agendamentos_filtrados['data'] <= fim.strftime('%Y-%m-%d'))
            ]
        
        if filtro_paciente != "Todos":
            agendamentos_filtrados = agendamentos_filtrados[agendamentos_filtrados['paciente_id'] == filtro_paciente]
        
        if filtro_status:
            agendamentos_filtrados = agendamentos_filtrados[agendamentos_filtrados['status'].isin(filtro_status)]
        
        # Ordenar por data e hor√°rio
        agendamentos_filtrados = agendamentos_filtrados.sort_values(['data', 'horario'])
        
        # Exibir resultados
        if len(agendamentos_filtrados) > 0:
            # Juntar com nomes dos pacientes
            agendamentos_completos = pd.merge(
                agendamentos_filtrados,
                pacientes_df[['id', 'nome']],
                left_on='paciente_id',
                right_on='id',
                how='left',
                suffixes=('', '_paciente')
            )
            
            st.markdown("### Lista de Agendamentos")
            
            for _, agendamento in agendamentos_completos.iterrows():
                # Determinar cor baseada no status
                cor_status = CORES_STATUS.get(agendamento['status'], "#ECEFF1")
                
                st.markdown(
                    f"<div style='background-color:{cor_status}; padding:10px; margin:5px; border-radius:5px;'>",
                    unsafe_allow_html=True
                )
                
                col1, col2, col3, col4 = st.columns([2, 3, 2, 1])
                
                with col1:
                    st.markdown(f"**{agendamento['data']}**<br>{agendamento['horario']}", unsafe_allow_html=True)
                
                with col2:
                    nome_paciente = agendamento['nome'] if 'nome' in agendamento else "Paciente n√£o encontrado"
                    st.markdown(f"**{nome_paciente}**<br>Terapeuta: {agendamento['terapeuta']}", unsafe_allow_html=True)
                
                with col3:
                    st.markdown(f"**Status:** {agendamento['status']}<br>", unsafe_allow_html=True)
                    if 'observacao' in agendamento and agendamento['observacao'] and str(agendamento['observacao']) != 'nan':
                        obs_curta = agendamento['observacao'][:30] + "..." if len(str(agendamento['observacao'])) > 30 else agendamento['observacao']
                        st.markdown(f"Obs: {obs_curta}", unsafe_allow_html=True)
                
                with col4:
                    # Bot√µes de a√ß√£o
                    if st.button("Editar", key=f"edit_{agendamento['id']}"):
                        st.session_state.editar_agendamento = agendamento['id']
                
                st.markdown("</div>", unsafe_allow_html=True)
            
            # Modal de edi√ß√£o
            if 'editar_agendamento' in st.session_state and st.session_state.editar_agendamento:
                agendamento_id = st.session_state.editar_agendamento
                agendamento = agendamentos_df[agendamentos_df['id'] == agendamento_id].iloc[0]
                
                st.markdown("<h3>Editar Agendamento</h3>", unsafe_allow_html=True)
                
                with st.form("form_editar_agendamento"):
                    # Campos de edi√ß√£o
                    status_options = STATUS_AGENDAMENTO
                    status_index = status_options.index(agendamento['status']) if agendamento['status'] in status_options else 0
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        novo_status = st.selectbox("Status", options=status_options, index=status_index)
                        nova_data = st.date_input("Data", value=datetime.strptime(agendamento['data'], '%Y-%m-%d'))
                    
                    with col2:
                        novo_terapeuta = st.text_input("Terapeuta", value=agendamento['terapeuta'])
                        novo_horario = st.time_input("Hor√°rio", value=datetime.strptime(agendamento['horario'], '%H:%M').time())
                    
                    nova_observacao = st.text_area("Observa√ß√£o", value=agendamento['observacao'] if isinstance(agendamento['observacao'], str) else "")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.form_submit_button("Salvar Altera√ß√µes"):
                            # Preparar dados atualizados
                            dados_atualizados = {
                                'status': novo_status,
                                'data': nova_data.strftime('%Y-%m-%d'),
                                'terapeuta': novo_terapeuta,
                                'horario': novo_horario.strftime('%H:%M'),
                                'observacao': nova_observacao
                            }
                            
                            # Atualizar no banco
                            atualizar_agendamento(agendamento_id, dados_atualizados)
                            
                            # Limpar estado e recarregar
                            st.session_state.editar_agendamento = None
                            st.success("Agendamento atualizado com sucesso!")
                            time.sleep(1)
                            st.experimental_rerun()
                    
                    with col2:
                        if st.form_submit_button("Cancelar"):
                            st.session_state.editar_agendamento = None
                            st.experimental_rerun()
        else:
            st.info("Nenhum agendamento encontrado com os filtros selecionados.")
    
    with tabs[3]:  # Agrupamentos Sugeridos
        st.markdown("<h2 class='sub-header'>Sugest√µes de Agrupamentos</h2>", unsafe_allow_html=True)
        st.markdown("""
        Este sistema analisa o perfil dos pacientes e sugere poss√≠veis agrupamentos para sess√µes em conjunto, 
        baseados em compatibilidade de perfil comportamental, habilidades a serem trabalhadas e n√≠vel de suporte.
        """)
        
        # Sele√ß√£o de data para an√°lise
        data_analise = st.date_input("Data para an√°lise", value=datetime.now())
        
        # Simular algoritmo de compatibilidade
        if st.button("Gerar Sugest√µes de Agrupamentos"):
            # Em um sistema real, aqui seria implementado um algoritmo que analisaria:
            # 1. Pacientes com necessidades semelhantes (baseado nas avalia√ß√µes)
            # 2. Compatibilidade de faixa et√°ria
            # 3. Compatibilidade de n√≠vel de suporte
            # 4. Compatibilidade comportamental
            
            st.markdown("### Sugest√µes de Agrupamentos")
            
            # Grupos simulados (para demonstra√ß√£o)
            grupos = [
                {
                    "nome": "Grupo 1: Coordena√ß√£o Motora Global",
                    "horario": "09:00 - 10:00",
                    "pacientes": [
                        {"nome": "Maria Silva", "idade": 8, "nivel_suporte": "N√≠vel 1"},
                        {"nome": "Pedro Costa", "idade": 7, "nivel_suporte": "N√≠vel 1"},
                        {"nome": "Lucas Oliveira", "idade": 9, "nivel_suporte": "N√≠vel 1"}
                    ],
                    "compatibilidade": 87,
                    "observacao": "Todos os pacientes precisam desenvolver coordena√ß√£o motora global e t√™m comportamento compat√≠vel em grupo."
                },
                {
                    "nome": "Grupo 2: Equil√≠brio e Praxia",
                    "horario": "10:30 - 11:30",
                    "pacientes": [
                        {"nome": "Jo√£o Santos", "idade": 10, "nivel_suporte": "N√≠vel 2"},
                        {"nome": "Ana Oliveira", "idade": 9, "nivel_suporte": "N√≠vel 1"}
                    ],
                    "compatibilidade": 72,
                    "observacao": "Ambos precisam desenvolver equil√≠brio. Ana pode ajudar a modelar comportamento para Jo√£o."
                },
                {
                    "nome": "Grupo 3: Coordena√ß√£o Motora Fina",
                    "horario": "14:00 - 15:00",
                    "pacientes": [
                        {"nome": "Luiza Mendes", "idade": 6, "nivel_suporte": "N√≠vel 1"},
                        {"nome": "Gabriel Alves", "idade": 7, "nivel_suporte": "N√≠vel 2"},
                        {"nome": "Sofia Castro", "idade": 6, "nivel_suporte": "N√≠vel 1"}
                    ],
                    "compatibilidade": 75,
                    "observacao": "Todos precisam desenvolver coordena√ß√£o motora fina. Aten√ß√£o especial para Gabriel que pode precisar de mais suporte."
                }
            ]
            
            # Exibir sugest√µes
            for i, grupo in enumerate(grupos):
                st.markdown("<div class='card'>", unsafe_allow_html=True)
                st.markdown(f"#### {grupo['nome']}")
                st.markdown(f"**Hor√°rio sugerido:** {grupo['horario']}")
                st.markdown(f"**Compatibilidade:** {grupo['compatibilidade']}%")
                
                st.markdown("**Pacientes compat√≠veis:**")
                for paciente in grupo['pacientes']:
                    st.markdown(f"- {paciente['nome']} ({paciente['idade']} anos) - {paciente['nivel_suporte']}")
                
                st.markdown(f"**Observa√ß√µes:** {grupo['observacao']}")
                st.markdown("</div>", unsafe_allow_html=True)
            
            # Oferecer op√ß√£o de criar agendamentos baseados nas sugest√µes
            st.markdown("---")
            st.markdown("### A√ß√µes")
            st.markdown("Deseja criar agendamentos baseados nestas sugest√µes?")
            
            col1, col2, col3 = st.columns(3)
            with col1:
                if st.button("Agendar Grupo 1"):
                    st.success("Simula√ß√£o: Agendamentos para Grupo 1 criados com sucesso!")
            
            with col2:
                if st.button("Agendar Grupo 2"):
                    st.success("Simula√ß√£o: Agendamentos para Grupo 2 criados com sucesso!")
            
            with col3:
                if st.button("Agendar Grupo 3"):
                    st.success("Simula√ß√£o: Agendamentos para Grupo 3 criados com sucesso!")

def mostrar_relatorios():
    """Exibe a se√ß√£o de relat√≥rios"""
    st.markdown("<h1 class='main-header'>Relat√≥rios</h1>", unsafe_allow_html=True)
    
    tabs = st.tabs(["Relat√≥rio de Evolu√ß√£o", "Relat√≥rio de Frequ√™ncia", "Relat√≥rio de Habilidades", "Compartilhar via WhatsApp"])
    
    # Carregar dados
    pacientes_df = carregar_pacientes()
    atendimentos_df = carregar_atendimentos()
    avaliacoes_df = carregar_avaliacoes()
    agendamentos_df = carregar_agendamentos()
    
    with tabs[0]:  # Relat√≥rio de Evolu√ß√£o
        st.markdown("<h2 class='sub-header'>Gerar Relat√≥rio de Evolu√ß√£o</h2>", unsafe_allow_html=True)
        
        # Sele√ß√£o de paciente
        paciente_id = st.selectbox(
            "Selecione o Paciente",
            options=pacientes_df['id'].tolist(),
            format_func=lambda x: pacientes_df[pacientes_df['id'] == x]['nome'].iloc[0] if x in pacientes_df['id'].values else "Paciente n√£o encontrado",
            key="paciente_relatorio"
        )
        
        col1, col2 = st.columns(2)
        
        with col1:
            periodo_inicio = st.date_input("Data Inicial", value=datetime.now() - timedelta(days=30))
        
        with col2:
            periodo_fim = st.date_input("Data Final", value=datetime.now())
        
        opcoes_relatorio = st.multiselect(
            "Incluir no relat√≥rio",
            options=["Dados pessoais", "Resumo de atendimentos", "Gr√°ficos de evolu√ß√£o", "Avalia√ß√µes do per√≠odo", "Habilidades trabalhadas", "Recomenda√ß√µes"],
            default=["Dados pessoais", "Resumo de atendimentos", "Habilidades trabalhadas"]
        )
        
        if st.button("Gerar Relat√≥rio de Evolu√ß√£o"):
            if paciente_id and len(opcoes_relatorio) > 0:
                # Buscar dados do paciente
                paciente_data = pacientes_df[pacientes_df['id'] == paciente_id]
                
                if len(paciente_data) > 0:
                    paciente = paciente_data.iloc[0]
                    
                    # Buscar atendimentos do per√≠odo
                    atendimentos_periodo = atendimentos_df[
                        (atendimentos_df['paciente_id'] == paciente_id) &
                        (atendimentos_df['data'] >= periodo_inicio.strftime('%Y-%m-%d')) &
                        (atendimentos_df['data'] <= periodo_fim.strftime('%Y-%m-%d'))
                    ]
                    
                    # Criar relat√≥rio
                    st.markdown("<div class='card'>", unsafe_allow_html=True)
                    st.markdown(f"<h2>Relat√≥rio de Evolu√ß√£o - {paciente['nome']}</h2>", unsafe_allow_html=True)
                    st.markdown(f"<p>Per√≠odo: {periodo_inicio.strftime('%d/%m/%Y')} a {periodo_fim.strftime('%d/%m/%Y')}</p>", unsafe_allow_html=True)
                    
                    if "Dados pessoais" in opcoes_relatorio:
                        st.markdown("### Dados Pessoais")
                        st.markdown(f"**Nome:** {paciente['nome']}")
                        
                        if 'data_nascimento' in paciente and paciente['data_nascimento'] and str(paciente['data_nascimento']) != 'nan':
                            try:
                                data_nasc = datetime.strptime(paciente['data_nascimento'], '%Y-%m-%d')
                                idade = (datetime.now() - data_nasc).days // 365
                                st.markdown(f"**Idade:** {idade} anos")
                            except:
                                pass
                        
                        st.markdown(f"**Diagn√≥stico:** {paciente['diagnostico']}")
                        
                        if 'nivel_suporte' in paciente and paciente['nivel_suporte'] and str(paciente['nivel_suporte']) != 'nan':
                            st.markdown(f"**N√≠vel de Suporte:** {paciente['nivel_suporte']}")
                    
                    if "Resumo de atendimentos" in opcoes_relatorio:
                        st.markdown("### Resumo de Atendimentos")
                        st.markdown(f"**Total de atendimentos no per√≠odo:** {len(atendimentos_periodo)}")
                        
                        if len(atendimentos_periodo) > 0:
                            atendimentos_periodo = atendimentos_periodo.sort_values('data')
                            
                            st.markdown("#### Evolu√ß√£o observada")
                            for _, atendimento in atendimentos_periodo.iterrows():
                                st.markdown(f"**Sess√£o {atendimento['data']}:**")
                                
                                if 'evolucao' in atendimento and atendimento['evolucao'] and str(atendimento['evolucao']) != 'nan':
                                    st.markdown(atendimento['evolucao'])
                                else:
                                    st.markdown("*Sem registro de evolu√ß√£o*")
                    
                    if "Habilidades trabalhadas" in opcoes_relatorio and len(atendimentos_periodo) > 0:
                        st.markdown("### Habilidades Trabalhadas")
                        
                        # Contar frequ√™ncia de habilidades
                        habilidades_contagem = {}
                        
                        for _, atendimento in atendimentos_periodo.iterrows():
                            if 'habilidades_trabalhadas' in atendimento and atendimento['habilidades_trabalhadas'] and str(atendimento['habilidades_trabalhadas']) != 'nan':
                                habilidades = [h.strip() for h in str(atendimento['habilidades_trabalhadas']).split(',') if h.strip()]
                                
                                for hab in habilidades:
                                    if hab in habilidades_contagem:
                                        habilidades_contagem[hab] += 1
                                    else:
                                        habilidades_contagem[hab] = 1
                        
                        # Exibir habilidades mais trabalhadas
                        if habilidades_contagem:
                            # Ordenar por frequ√™ncia
                            habilidades_ordenadas = sorted(habilidades_contagem.items(), key=lambda x: x[1], reverse=True)
                            
                            # Criar gr√°fico
                            fig, ax = plt.subplots(figsize=(10, 6))
                            
                            # Limitar para 10 primeiras
                            top_habilidades = habilidades_ordenadas[:10]
                            habs, frequencias = zip(*top_habilidades)
                            
                            ax.barh(habs, frequencias, color='purple')
                            ax.set_xlabel('N√∫mero de Sess√µes')
                            ax.set_title('Habilidades Mais Trabalhadas no Per√≠odo')
                            plt.tight_layout()
                            st.pyplot(fig)
                    
                    if "Gr√°ficos de evolu√ß√£o" in opcoes_relatorio:
                        st.markdown("### Gr√°ficos de Evolu√ß√£o")
                        
                        # Buscar avalia√ß√µes do per√≠odo para an√°lise de evolu√ß√£o
                        avaliacoes_periodo = avaliacoes_df[
                            (avaliacoes_df['paciente_id'] == paciente_id) &
                            (avaliacoes_df['data'] >= periodo_inicio.strftime('%Y-%m-%d')) &
                            (avaliacoes_df['data'] <= periodo_fim.strftime('%Y-%m-%d'))
                        ]
                        
                        if len(avaliacoes_periodo) > 1:  # Pelo menos 2 avalia√ß√µes para comparar
                            st.markdown("#### Evolu√ß√£o nas √Åreas Avaliadas")
                            
                            # Extrair pontua√ß√µes
                            evolucao_dados = {}
                            
                            for _, avaliacao in avaliacoes_periodo.iterrows():
                                data = avaliacao['data']
                                
                                if 'pontuacao' in avaliacao and avaliacao['pontuacao'] and str(avaliacao['pontuacao']) != 'nan':
                                    try:
                                        pontuacoes = json.loads(avaliacao['pontuacao'])
                                        
                                        for area, pontuacao in pontuacoes.items():
                                            if area not in evolucao_dados:
                                                evolucao_dados[area] = []
                                            
                                            evolucao_dados[area].append((data, pontuacao))
                                    except:
                                        continue
                            
                            # Criar gr√°ficos de evolu√ß√£o
                            if evolucao_dados:
                                for area, dados in evolucao_dados.items():
                                    if len(dados) > 1:  # S√≥ mostrar √°reas com pelo menos 2 avalia√ß√µes
                                        st.markdown(f"**{area}**")
                                        
                                        datas = [d[0] for d in dados]
                                        valores = [d[1] for d in dados]
                                        
                                        fig, ax = plt.subplots(figsize=(10, 4))
                                        ax.plot(datas, valores, marker='o', linestyle='-', color='purple')
                                        ax.set_xlabel('Data')
                                        ax.set_ylabel('N√≠vel')
                                        plt.xticks(rotation=45)
                                        plt.grid(True, linestyle='--', alpha=0.7)
                                        plt.tight_layout()
                                        st.pyplot(fig)
                            else:
                                st.info("N√£o h√° dados suficientes para gerar gr√°ficos de evolu√ß√£o.")
                        else:
                            # Simula√ß√£o de gr√°fico de evolu√ß√£o quando n√£o h√° avalia√ß√µes suficientes
                            if len(atendimentos_periodo) > 1:
                                st.info("Gr√°fico simulado baseado nos atendimentos (em um sistema completo, seria baseado em avalia√ß√µes quantitativas)")
                                
                                fig, ax = plt.subplots(figsize=(10, 6))
                                datas = [datetime.strptime(d, '%Y-%m-%d') for d in sorted(atendimentos_periodo['data'].unique())]
                                valores = np.cumsum(np.random.rand(len(datas)) * 0.5 + 0.5)  # Simula√ß√£o de progresso
                                
                                ax.plot(datas, valores, marker='o', linestyle='-', color='purple')
                                ax.set_xlabel('Data')
                                ax.set_ylabel('N√≠vel de Habilidade (simulado)')
                                ax.set_title('Evolu√ß√£o das Habilidades ao Longo do Tempo')
                                plt.xticks(rotation=45)
                                plt.tight_layout()
                                st.pyplot(fig)
                            else:
                                st.info("N√£o h√° dados suficientes para gerar gr√°ficos de evolu√ß√£o.")
                    
                    if "Avalia√ß√µes do per√≠odo" in opcoes_relatorio:
                        st.markdown("### Avalia√ß√µes no Per√≠odo")
                        
                        avaliacoes_periodo = avaliacoes_df[
                            (avaliacoes_df['paciente_id'] == paciente_id) &
                            (avaliacoes_df['data'] >= periodo_inicio.strftime('%Y-%m-%d')) &
                            (avaliacoes_df['data'] <= periodo_fim.strftime('%Y-%m-%d'))
                        ]
                        
                        if len(avaliacoes_periodo) > 0:
                            avaliacoes_periodo = avaliacoes_periodo.sort_values('data')
                            
                            for _, avaliacao in avaliacoes_periodo.iterrows():
                                st.markdown(f"#### {avaliacao['data']} - {avaliacao['tipo_avaliacao']}")
                                
                                st.markdown("**Resultados:**")
                                if 'resultados' in avaliacao and avaliacao['resultados'] and str(avaliacao['resultados']) != 'nan':
                                    st.markdown(avaliacao['resultados'])
                                else:
                                    st.markdown("*Sem registro de resultados*")
                                
                                st.markdown("**Recomenda√ß√µes:**")
                                if 'recomendacoes' in avaliacao and avaliacao['recomendacoes'] and str(avaliacao['recomendacoes']) != 'nan':
                                    st.markdown(avaliacao['recomendacoes'])
                                else:
                                    st.markdown("*Sem registro de recomenda√ß√µes*")
                        else:
                            st.info("N√£o foram realizadas avalia√ß√µes no per√≠odo selecionado.")
                    
                    if "Recomenda√ß√µes" in opcoes_relatorio:
                        st.markdown("### Recomenda√ß√µes para o Pr√≥ximo Per√≠odo")
                        recomendacoes = st.text_area("Adicione recomenda√ß√µes para o pr√≥ximo per√≠odo", height=150)
                    
                    st.markdown("</div>", unsafe_allow_html=True)
                    
                    # Bot√µes de exporta√ß√£o
                    st.markdown("### Exportar Relat√≥rio")
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.download_button(
                            "Exportar como PDF",
                            data="Simula√ß√£o de PDF",
                            file_name=f"Relatorio_{paciente['nome']}_{periodo_inicio.strftime('%d%m%Y')}_{periodo_fim.strftime('%d%m%Y')}.pdf",
                            mime="application/pdf"
                        )
                    
                    with col2:
                        st.download_button(
                            "Exportar como Word",
                            data="Simula√ß√£o de DOCX",
                            file_name=f"Relatorio_{paciente['nome']}_{periodo_inicio.strftime('%d%m%Y')}_{periodo_fim.strftime('%d%m%Y')}.docx",
                            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                        )
                    
                    with col3:
                        if st.button("Enviar por E-mail"):
                            st.success("Simula√ß√£o: Relat√≥rio enviado por e-mail para o respons√°vel!")
                else:
                    st.error("Paciente n√£o encontrado.")
            else:
                st.error("Por favor, selecione um paciente e pelo menos uma op√ß√£o para o relat√≥rio.")
    
    with tabs[1]:  # Relat√≥rio de Frequ√™ncia
        st.markdown("<h2 class='sub-header'>Relat√≥rio de Frequ√™ncia</h2>", unsafe_allow_html=True)
        
        # Filtros
        col1, col2 = st.columns(2)
        with col1:
            mes_ano_freq = st.date_input(
                "Selecione o m√™s",
                value=datetime.now().replace(day=1),
                format="MM/YYYY",
                key="mes_freq"
            )
        
        with col2:
            paciente_freq = st.selectbox(
                "Paciente (opcional)",
                options=["Todos"] + pacientes_df['id'].tolist(),
                format_func=lambda x: "Todos os pacientes" if x == "Todos" else pacientes_df[pacientes_df['id'] == x]['nome'].iloc[0] if x in pacientes_df['id'].values else "Paciente n√£o encontrado",
                key="paciente_freq"
            )
        
        if st.button("Gerar Relat√≥rio de Frequ√™ncia"):
            st.markdown("<h3>Relat√≥rio de Frequ√™ncia</h3>", unsafe_allow_html=True)
            
            # Determinar dias do m√™s
            primeiro_dia = mes_ano_freq.replace(day=1)
            if mes_ano_freq.month == 12:
                ultimo_dia = mes_ano_freq.replace(year=mes_ano_freq.year + 1, month=1, day=1) - timedelta(days=1)
            else:
                ultimo_dia = mes_ano_freq.replace(month=mes_ano_freq.month + 1, day=1) - timedelta(days=1)
            
            # Filtrar agendamentos do m√™s
            agendamentos_mes = agendamentos_df[
                (agendamentos_df['data'] >= primeiro_dia.strftime('%Y-%m-%d')) & 
                (agendamentos_df['data'] <= ultimo_dia.strftime('%Y-%m-%d'))
            ]
            
            if paciente_freq != "Todos":
                agendamentos_mes = agendamentos_mes[agendamentos_mes['paciente_id'] == paciente_freq]
            
            # Calcular estat√≠sticas
            total_agendamentos = len(agendamentos_mes)
            
            if total_agendamentos > 0:
                # An√°lise de status
                status_counts = {}
                
                for status in STATUS_AGENDAMENTO:
                    status_counts[status] = len(agendamentos_mes[agendamentos_mes['status'] == status])
                
                # Exibir estat√≠sticas gerais
                st.markdown("<div class='card'>", unsafe_allow_html=True)
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("Total de Sess√µes", total_agendamentos)
                
                with col2:
                    taxa_presenca = status_counts["Conclu√≠do"] / total_agendamentos * 100 if total_agendamentos > 0 else 0
                    st.metric("Taxa de Presen√ßa", f"{taxa_presenca:.1f}%")
                
                with col3:
                    taxa_falta = status_counts["Faltou"] / total_agendamentos * 100 if total_agendamentos > 0 else 0
                    st.metric("Taxa de Faltas", f"{taxa_falta:.1f}%")
                
                with col4:
                    taxa_cancel = status_counts["Cancelado"] / total_agendamentos * 100 if total_agendamentos > 0 else 0
                    st.metric("Taxa de Cancelamentos", f"{taxa_cancel:.1f}%")
                
                st.markdown("</div>", unsafe_allow_html=True)
                
                # Gr√°fico de frequ√™ncia
                fig, ax = plt.subplots(figsize=(10, 6))
                labels = status_counts.keys()
                sizes = status_counts.values()
                
                # Cores para cada status
                cores = []
                for status in labels:
                    cor = CORES_STATUS.get(status, "#ECEFF1")
                    # Converter cor de hex para RGB para poder escurecer um pouco
                    cores.append(cor)
                
                # Limpar zeros para melhor visualiza√ß√£o
                labels_filtradas = []
                sizes_filtradas = []
                cores_filtradas = []
                
                for i, size in enumerate(sizes):
                    if size > 0:
                        labels_filtradas.append(labels[i])
                        sizes_filtradas.append(size)
                        cores_filtradas.append(cores[i])
                
                if labels_filtradas:
                    ax.pie(sizes_filtradas, labels=labels_filtradas, colors=cores_filtradas, autopct='%1.1f%%', startangle=90)
                    ax.axis('equal')
                    st.pyplot(fig)
                
                # Lista de faltas
                if status_counts["Faltou"] > 0:
                    st.markdown("<h3>Detalhamento de Faltas</h3>", unsafe_allow_html=True)
                    
                    faltas = agendamentos_mes[agendamentos_mes['status'] == "Faltou"]
                    
                    # Juntar com nomes dos pacientes
                    faltas_completo = pd.merge(
                        faltas,
                        pacientes_df[['id', 'nome']],
                        left_on='paciente_id',
                        right_on='id',
                        how='left',
                        suffixes=('', '_paciente')
                    )
                    
                    for _, falta in faltas_completo.iterrows():
                        nome_paciente = falta['nome'] if 'nome' in falta else "Paciente n√£o encontrado"
                        
                        st.markdown(
                            f"<div style='background-color:#FFEBEE; padding:10px; margin:5px; border-radius:5px;'>"
                            f"**{falta['data']} √†s {falta['horario']}** - {nome_paciente} (Terapeuta: {falta['terapeuta']})"
                            f"</div>",
                            unsafe_allow_html=True
                        )
                
                # Oferecer download do relat√≥rio
                st.download_button(
                    "Exportar Relat√≥rio de Frequ√™ncia",
                    data="Simula√ß√£o de relat√≥rio de frequ√™ncia",
                    file_name=f"Frequencia_{mes_ano_freq.strftime('%m%Y')}.pdf",
                    mime="application/pdf"
                )
            else:
                st.info("N√£o h√° dados de agendamento para o per√≠odo selecionado.")
    
    with tabs[2]:  # Relat√≥rio de Habilidades
        st.markdown("<h2 class='sub-header'>Relat√≥rio de Habilidades</h2>", unsafe_allow_html=True)
        
        # Filtros para o relat√≥rio
        col1, col2 = st.columns(2)
        
        with col1:
            paciente_hab = st.selectbox(
                "Selecione o Paciente",
                options=pacientes_df['id'].tolist(),
                format_func=lambda x: pacientes_df[pacientes_df['id'] == x]['nome'].iloc[0] if x in pacientes_df['id'].values else "Paciente n√£o encontrado",
                key="paciente_hab"
            )
        
        with col2:
            periodo_hab = st.selectbox(
                "Per√≠odo de An√°lise",
                options=["√öltimo m√™s", "√öltimos 3 meses", "√öltimos 6 meses", "√öltimo ano"]
            )
        
        if st.button("Analisar Habilidades"):
            st.markdown("<h3>An√°lise de Habilidades Trabalhadas</h3>", unsafe_allow_html=True)
            
            # Determinar per√≠odo de an√°lise
            hoje = datetime.now()
            if periodo_hab == "√öltimo m√™s":
                data_inicio = (hoje - timedelta(days=30)).strftime('%Y-%m-%d')
            elif periodo_hab == "√öltimos 3 meses":
                data_inicio = (hoje - timedelta(days=90)).strftime('%Y-%m-%d')
            elif periodo_hab == "√öltimos 6 meses":
                data_inicio = (hoje - timedelta(days=180)).strftime('%Y-%m-%d')
            else:  # √öltimo ano
                data_inicio = (hoje - timedelta(days=365)).strftime('%Y-%m-%d')
            
            # Filtrar atendimentos do per√≠odo
            atendimentos_periodo = atendimentos_df[
                (atendimentos_df['paciente_id'] == paciente_hab) &
                (atendimentos_df['data'] >= data_inicio) &
                (atendimentos_df['data'] <= hoje.strftime('%Y-%m-%d'))
            ]
            
            # Buscar dados do paciente
            paciente_data = pacientes_df[pacientes_df['id'] == paciente_hab]
            
            if len(paciente_data) > 0:
                paciente = paciente_data.iloc[0]
                
                if len(atendimentos_periodo) > 0:
                    st.markdown(f"**Paciente:** {paciente['nome']}")
                    st.markdown(f"**Per√≠odo analisado:** {data_inicio} a {hoje.strftime('%Y-%m-%d')}")
                    st.markdown(f"**Total de atendimentos:** {len(atendimentos_periodo)}")
                    
                    # Analisar habilidades trabalhadas
                    habilidades_contagem = {}
                    
                    for _, atendimento in atendimentos_periodo.iterrows():
                        if 'habilidades_trabalhadas' in atendimento and atendimento['habilidades_trabalhadas'] and str(atendimento['habilidades_trabalhadas']) != 'nan':
                            habilidades = [h.strip() for h in str(atendimento['habilidades_trabalhadas']).split(',') if h.strip()]
                            
                            for hab in habilidades:
                                if hab in habilidades_contagem:
                                    habilidades_contagem[hab] += 1
                                else:
                                    habilidades_contagem[hab] = 1
                    
                    if habilidades_contagem:
                        # Ordenar por frequ√™ncia
                        habilidades_ordenadas = sorted(habilidades_contagem.items(), key=lambda x: x[1], reverse=True)
                        
                        # Criar gr√°fico
                        fig, ax = plt.subplots(figsize=(12, 8))
                        
                        # Limitar para 15 habilidades
                        max_habs = min(15, len(habilidades_ordenadas))
                        habs, frequencias = zip(*habilidades_ordenadas[:max_habs])
                        
                        ax.barh(habs[:max_habs], frequencias[:max_habs], color='purple')
                        ax.set_xlabel('N√∫mero de Sess√µes')
                        ax.set_title('Habilidades Trabalhadas no Per√≠odo')
                        plt.tight_layout()
                        st.pyplot(fig)
                        
                        # An√°lise de prioridades vs. habilidades trabalhadas
                        st.markdown("### An√°lise de Prioridades")
                        st.markdown("""
                        A an√°lise abaixo compara as habilidades que precisam ser priorizadas com base na avalia√ß√£o
                        mais recente e o n√∫mero de sess√µes em que cada habilidade foi trabalhada.
                        """)
                        
                        # Buscar avalia√ß√£o mais recente
                        avaliacoes_paciente = avaliacoes_df[avaliacoes_df['paciente_id'] == paciente_hab]
                        
                        if len(avaliacoes_paciente) > 0:
                            # Ordenar por data (mais recente primeiro)
                            avaliacoes_paciente = avaliacoes_paciente.sort_values('data', ascending=False)
                            avaliacao_recente = avaliacoes_paciente.iloc[0]
                            
                            # Extrair habilidades priorit√°rias da avalia√ß√£o
                            habilidades_prioritarias = {}
                            
                            if 'areas_avaliadas' in avaliacao_recente and avaliacao_recente['areas_avaliadas'] and str(avaliacao_recente['areas_avaliadas']) != 'nan':
                                try:
                                    areas = json.loads(avaliacao_recente['areas_avaliadas'])
                                    pontuacoes = json.loads(avaliacao_recente['pontuacao']) if 'pontuacao' in avaliacao_recente and avaliacao_recente['pontuacao'] else {}
                                    
                                    for area, nivel in areas.items():
                                        # Determinar prioridade: maior para n√≠veis mais baixos
                                        nivel_idx = NIVEIS_DESENVOLVIMENTO.index(nivel) if nivel in NIVEIS_DESENVOLVIMENTO else 0
                                        prioridade = 10 - nivel_idx  # Inverter para que n√≠veis baixos tenham prioridade alta
                                        
                                        if area in pontuacoes:
                                            # Usar pontua√ß√£o como prioridade se dispon√≠vel
                                            prioridade = 10 - pontuacoes[area]
                                        
                                        habilidades_prioritarias[area] = max(1, min(10, prioridade))  # Limitar entre 1 e 10
                                except:
                                    # Simula√ß√£o quando n√£o h√° dados adequados
                                    for area in list(habilidades_contagem.keys())[:5]:
                                        habilidades_prioritarias[area] = np.random.randint(5, 10)
                            else:
                                # Simula√ß√£o quando n√£o h√° √°reas avaliadas
                                for area in list(habilidades_contagem.keys())[:5]:
                                    habilidades_prioritarias[area] = np.random.randint(5, 10)
                        else:
                            # Simula√ß√£o quando n√£o h√° avalia√ß√µes
                            for area in list(habilidades_contagem.keys())[:5]:
                                habilidades_prioritarias[area] = np.random.randint(5, 10)
                        
                        # Comparar habilidades trabalhadas vs. priorit√°rias
                        dados_comparacao = []
                        
                        for hab, prioridade in habilidades_prioritarias.items():
                            frequencia = habilidades_contagem.get(hab, 0)
                            dados_comparacao.append({
                                'habilidade': hab,
                                'prioridade': prioridade,
                                'frequencia': frequencia
                            })
                        
                        # Criar gr√°fico de compara√ß√£o
                        if dados_comparacao:
                            fig, ax = plt.subplots(figsize=(12, 6))
                            
                            habs = [item['habilidade'] for item in dados_comparacao]
                            prioridades = [item['prioridade'] for item in dados_comparacao]
                            frequencias = [item['frequencia'] for item in dados_comparacao]
                            
                            x = np.arange(len(habs))
                            width = 0.35
                            
                            ax.bar(x - width/2, prioridades, width, label='Prioridade (0-10)', color='#7B1FA2')
                            ax.bar(x + width/2, frequencias, width, label='Sess√µes Realizadas', color='#4CAF50')
                            
                            ax.set_xticks(x)
                            ax.set_xticklabels(habs, rotation=45, ha='right')
                            ax.legend()
                            ax.set_title('Prioridades vs. Habilidades Trabalhadas')
                            plt.tight_layout()
                            st.pyplot(fig)
                            
                            # Identificar habilidades sub-trabalhadas
                            st.markdown("### Recomenda√ß√µes")
                            
                            habilidades_subtrabalhadas = []
                            for item in dados_comparacao:
                                if item['prioridade'] > item['frequencia'] + 2:  # Prioridade maior que frequ√™ncia + margem
                                    habilidades_subtrabalhadas.append(item['habilidade'])
                            
                            if habilidades_subtrabalhadas:
                                st.markdown("#### Habilidades que precisam de mais aten√ß√£o:")
                                for hab in habilidades_subtrabalhadas:
                                    st.markdown(f"- **{hab}**")
                                
                                st.info("""
                                Recomenda-se aumentar o foco nestas habilidades nas pr√≥ximas sess√µes, 
                                pois elas foram identificadas como priorit√°rias na avalia√ß√£o, mas n√£o est√£o 
                                recebendo aten√ß√£o suficiente nos atendimentos.
                                """)
                            else:
                                st.success("As habilidades priorit√°rias est√£o sendo adequadamente trabalhadas!")
                    else:
                        st.warning("N√£o foi poss√≠vel encontrar dados de habilidades trabalhadas no per√≠odo selecionado.")
                else:
                    st.info(f"N√£o h√° registros de atendimentos para {paciente['nome']} no per√≠odo selecionado.")
            else:
                st.error("Paciente n√£o encontrado.")
    
    with tabs[3]:  # Compartilhar via WhatsApp
        st.markdown("<h2 class='sub-header'>Compartilhar Relat√≥rios via WhatsApp</h2>", unsafe_allow_html=True)
        
        # Sele√ß√£o de paciente e tipo de relat√≥rio
        col1, col2 = st.columns(2)
        
        with col1:
            paciente_whats = st.selectbox(
                "Selecione o Paciente",
                options=pacientes_df['id'].tolist(),
                format_func=lambda x: pacientes_df[pacientes_df['id'] == x]['nome'].iloc[0] if x in pacientes_df['id'].values else "Paciente n√£o encontrado",
                key="paciente_whats"
            )
        
        with col2:
            tipo_relatorio = st.selectbox(
                "Tipo de Relat√≥rio",
                options=["Evolu√ß√£o Mensal", "Evolu√ß√£o Trimestral", "Relat√≥rio de Avalia√ß√£o", "Relat√≥rio de Frequ√™ncia", "Relat√≥rio Personalizado"]
            )
        
        # Op√ß√µes para grupos de WhatsApp
        st.markdown("### Op√ß√µes de Envio")
        
        col1, col2 = st.columns(2)
        
        with col1:
            destinatario = st.radio(
                "Destinat√°rio",
                options=["Grupo da fam√≠lia", "Respons√°vel direto", "Equipe multidisciplinar", "Personalizado"]
            )
        
        with col2:
            if destinatario == "Personalizado":
                numero_whatsapp = st.text_input("N√∫mero de WhatsApp (com DDD)")
            
            incluir_anexos = st.checkbox("Incluir anexos (gr√°ficos e tabelas)")
        
        # Mensagem personalizada
        st.markdown("### Mensagem Personalizada (opcional)")
        mensagem = st.text_area("Adicione uma mensagem personalizada ao relat√≥rio")
        
        if st.button("Enviar Relat√≥rio via WhatsApp"):
            if paciente_whats:
                # Buscar dados do paciente
                paciente_data = pacientes_df[pacientes_df['id'] == paciente_whats]
                
                if len(paciente_data) > 0:
                    paciente = paciente_data.iloc[0]
                    
                    # Simula√ß√£o de envio
                    st.success(f"Simula√ß√£o: Relat√≥rio {tipo_relatorio} de {paciente['nome']} enviado com sucesso para {destinatario}!")
                    
                    # Exibir pr√©via da mensagem
                    st.markdown("### Pr√©via da Mensagem")
                    st.markdown("<div style='background-color:#E1F5FE; padding:15px; border-radius:10px;'>", unsafe_allow_html=True)
                    st.markdown(f"*Relat√≥rio {tipo_relatorio} - {paciente['nome']}*")
                    st.markdown("Prezado(a) respons√°vel,")
                    st.markdown(f"Segue o relat√≥rio de {tipo_relatorio} do paciente {paciente['nome']}.")
                    
                    if mensagem:
                        st.markdown(f"*Nota do terapeuta:*\n{mensagem}")
                    
                    st.markdown("Atenciosamente,\nEquipe de Psicomotricidade")
                    st.markdown("</div>", unsafe_allow_html=True)
                else:
                    st.error("Paciente n√£o encontrado.")
            else:
                st.error("Por favor, selecione um paciente para enviar o relat√≥rio.")

def mostrar_configuracoes():
    """Exibe a se√ß√£o de configura√ß√µes do sistema"""
    st.markdown("<h1 class='main-header'>Configura√ß√µes</h1>", unsafe_allow_html=True)
    
    tabs = st.tabs(["Sistema", "Backup e Restaura√ß√£o", "Usu√°rios", "Sobre"])
    
    with tabs[0]:  # Sistema
        st.markdown("<h2 class='sub-header'>Configura√ß√µes do Sistema</h2>", unsafe_allow_html=True)
        
        # Verificar se usu√°rio tem permiss√£o de administrador
        if 'perfil' not in st.session_state or st.session_state.perfil != 'admin':
            st.warning("Voc√™ precisa de permiss√µes de administrador para acessar estas configura√ß√µes.")
            return
        
        # Op√ß√µes gerais
        st.markdown("### Op√ß√µes Gerais")
        
        col1, col2 = st.columns(2)
        
        with col1:
            notificacoes_email = st.checkbox("Ativar notifica√ß√µes por e-mail", value=True)
            notificacoes_whatsapp = st.checkbox("Ativar notifica√ß√µes por WhatsApp", value=True)
        
        with col2:
            backup_automatico = st.checkbox("Ativar backup autom√°tico di√°rio", value=True)
            dias_retencao = st.number_input("Dias de reten√ß√£o de backups", min_value=7, value=30)
        
        # Personaliza√ß√£o
        st.markdown("### Personaliza√ß√£o")
        
        tema_cores = st.selectbox(
            "Tema de cores",
            options=["Roxo (Padr√£o)", "Azul", "Verde", "Vermelho"]
        )
        
        logo = st.file_uploader("Logo personalizada", type=["png", "jpg", "jpeg"])
        
        nome_clinica = st.text_input("Nome da cl√≠nica", value="NeuroBase Psicomotricidade")
        
        # Integra√ß√£o
        st.markdown("### Integra√ß√µes")
        
        integrar_google = st.checkbox("Integrar com Google Calendar", value=False)
        if integrar_google:
            google_api_key = st.text_input("Google API Key", type="password")
        
        integrar_whatsapp = st.checkbox("Integrar com WhatsApp Business API", value=False)
        if integrar_whatsapp:
            whatsapp_api_key = st.text_input("WhatsApp Business API Key", type="password")
        
        # Salvar configura√ß√µes
        if st.button("Salvar Configura√ß√µes"):
            # Aqui seria implementado o c√≥digo para salvar as configura√ß√µes
            st.success("Configura√ß√µes salvas com sucesso!")
    
    with tabs[1]:  # Backup e Restaura√ß√£o
        st.markdown("<h2 class='sub-header'>Backup e Restaura√ß√£o</h2>", unsafe_allow_html=True)
        
        # Verificar se usu√°rio tem permiss√£o de administrador
        if 'perfil' not in st.session_state or st.session_state.perfil != 'admin':
            st.warning("Voc√™ precisa de permiss√µes de administrador para acessar estas configura√ß√µes.")
            return
        
        # Backup manual
        st.markdown("### Backup Manual")
        
        if st.button("Criar Backup Agora"):
            sucesso, arquivo = backup_banco_dados()
            
            if sucesso:
                st.success(f"Backup criado com sucesso: {arquivo}")
            else:
                st.error(f"Erro ao criar backup: {arquivo}")
        
        # Lista de backups
        st.markdown("### Backups Dispon√≠veis")
        
        backups_df = obter_dados_backup()
        
        if len(backups_df) > 0:
            for _, backup in backups_df.iterrows():
                st.markdown(f"<div class='card'>", unsafe_allow_html=True)
                
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.markdown(f"**Data:** {backup['timestamp']}")
                    st.markdown(f"**Arquivo:** {backup['arquivo']}")
                    st.markdown(f"**Usu√°rio:** {backup['usuario']}")
                
                with col2:
                    if st.button("Restaurar", key=f"restore_{backup['id']}"):
                        st.warning("Funcionalidade n√£o implementada na demonstra√ß√£o")
                
                st.markdown("</div>", unsafe_allow_html=True)
        else:
            st.info("Nenhum backup dispon√≠vel.")
        
        # Op√ß√µes de exporta√ß√£o
        st.markdown("### Exporta√ß√£o de Dados")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("Exportar Todos os Dados (CSV)"):
                st.warning("Funcionalidade n√£o implementada na demonstra√ß√£o")
        
        with col2:
            if st.button("Exportar Todos os Dados (JSON)"):
                st.warning("Funcionalidade n√£o implementada na demonstra√ß√£o")
    
    with tabs[2]:  # Usu√°rios
        st.markdown("<h2 class='sub-header'>Gerenciamento de Usu√°rios</h2>", unsafe_allow_html=True)
        
        # Verificar se usu√°rio tem permiss√£o de administrador
        if 'perfil' not in st.session_state or st.session_state.perfil != 'admin':
            st.warning("Voc√™ precisa de permiss√µes de administrador para acessar estas configura√ß√µes.")
            return
        
        # Lista de usu√°rios (simulada)
        st.markdown("### Usu√°rios do Sistema")
        
        usuarios = [
            {"id": 1, "nome": "Administrador", "email": "admin@neurobase.com", "perfil": "admin", "ultimo_acesso": "2025-05-14 09:15:22"},
            {"id": 2, "nome": "Terapeuta", "email": "terapeuta@neurobase.com", "perfil": "terapeuta", "ultimo_acesso": "2025-05-14 08:30:15"},
        ]
        
        for usuario in usuarios:
            st.markdown(f"<div class='card'>", unsafe_allow_html=True)
            
            col1, col2, col3 = st.columns([3, 2, 1])
            
            with col1:
                st.markdown(f"**{usuario['nome']}**")
                st.markdown(f"E-mail: {usuario['email']}")
            
            with col2:
                st.markdown(f"Perfil: {usuario['perfil']}")
                st.markdown(f"√öltimo acesso: {usuario['ultimo_acesso']}")
            
            with col3:
                if st.button("Editar", key=f"edit_user_{usuario['id']}"):
                    st.warning("Funcionalidade n√£o implementada na demonstra√ß√£o")
            
            st.markdown("</div>", unsafe_allow_html=True)
        
        # Adicionar novo usu√°rio
        st.markdown("### Adicionar Novo Usu√°rio")
        
        with st.form("form_novo_usuario"):
            col1, col2 = st.columns(2)
            
            with col1:
                nome_usuario = st.text_input("Nome completo")
                email_usuario = st.text_input("E-mail")
            
            with col2:
                senha_usuario = st.text_input("Senha", type="password")
                perfil_usuario = st.selectbox("Perfil", options=["terapeuta", "admin"])
            
            submitted = st.form_submit_button("Adicionar Usu√°rio")
            
            if submitted:
                st.success(f"Usu√°rio {nome_usuario} adicionado com sucesso!")
    
    with tabs[3]:  # Sobre
        st.markdown("<h2 class='sub-header'>Sobre o Sistema</h2>", unsafe_allow_html=True)
        
        # Informa√ß√µes sobre o sistema
        st.markdown(f"### NeuroBase v{APP_VERSION}")
        st.markdown("Sistema de Gest√£o em Psicomotricidade")
        
        st.markdown("#### Desenvolvido por")
        st.markdown("Equipe NeuroBase")
        
        st.markdown("#### Recursos")
        st.markdown("""
        - Cadastro e gerenciamento de pacientes
        - Registro de atendimentos
        - Avalia√ß√µes e acompanhamento
        - Agendamentos
        - Relat√≥rios
        - Sistema de backup
        """)
        
        st.markdown("#### Informa√ß√µes T√©cnicas")
        st.markdown(f"- Vers√£o: {APP_VERSION}")
        st.markdown(f"- Data da √∫ltima atualiza√ß√£o: 14 de maio de 2025")
        st.markdown(f"- Plataforma: Python + Streamlit")
        st.markdown(f"- Banco de dados: SQLite")

###############################
# INICIALIZA√á√ÉO E EXECU√á√ÉO
###############################

def main():
    """Fun√ß√£o principal de execu√ß√£o do aplicativo"""
    
    # Inicializar banco de dados se n√£o existir
    inicializar_banco_dados()
    
    # Migrar dados de CSV para SQLite (se necess√°rio)
    migrar_dados_csv_para_sqlite()
    
    # Inicializar sess√£o
    if 'autenticado' not in st.session_state:
        st.session_state.autenticado = False
    
    # Verificar autentica√ß√£o
    if not autenticacao():
        return
    
    # Configurar a barra lateral
    st.sidebar.markdown(f"### Bem-vindo, {st.session_state.usuario}!")
    st.sidebar.markdown("---")
    
    opcao_selecionada = st.sidebar.radio(
        "Navega√ß√£o",
        ["Dashboard", "Pacientes", "Atendimentos", "Avalia√ß√µes", "Agendamentos", "Relat√≥rios", "Configura√ß√µes"]
    )
    
    st.sidebar.markdown("---")
    if st.sidebar.button("Sair"):
        # Limpar estado da sess√£o e redirecionar para login
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.experimental_rerun()
    
    # Mostrar a vers√£o do sistema
    st.sidebar.markdown("<div class='version-info'>NeuroBase v" + APP_VERSION + "</div>", unsafe_allow_html=True)
    
    # Renderizar a p√°gina selecionada
    if opcao_selecionada == "Dashboard":
        mostrar_dashboard()
    elif opcao_selecionada == "Pacientes":
        mostrar_pacientes()
    elif opcao_selecionada == "Atendimentos":
        mostrar_atendimentos()
    elif opcao_selecionada == "Avalia√ß√µes":
        mostrar_avaliacoes()
    elif opcao_selecionada == "Agendamentos":
        mostrar_agendamentos()
    elif opcao_selecionada == "Relat√≥rios":
        mostrar_relatorios()
    elif opcao_selecionada == "Configura√ß√µes":
        mostrar_configuracoes()

if __name__ == "__main__":
    main()
