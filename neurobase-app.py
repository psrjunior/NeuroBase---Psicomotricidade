import streamlit as st
import pandas as pd
import numpy as np
import datetime
import json
import os
import base64
from PIL import Image
import io
import matplotlib.pyplot as plt
import time
import hashlib
import sqlite3
import uuid
import yaml
from yaml.loader import SafeLoader
from datetime import datetime, timedelta

# Vers√£o do aplicativo
APP_VERSION = "1.0.1"

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="NeuroBase - Sistema de Gest√£o em Psicomotricidade",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilos CSS customizados
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #4527A0;
        text-align: center;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.8rem;
        color: #5E35B1;
        margin-bottom: 0.5rem;
    }
    .card {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }
    .icon-text {
        display: flex;
        align-items: center;
        gap: 10px;
    }
    .skill-tag {
        background-color: #E1BEE7;
        color: #4A148C;
        padding: 5px 10px;
        border-radius: 15px;
        margin: 5px;
        display: inline-block;
        font-size: 0.85rem;
        cursor: pointer;
    }
    .skill-tag-selected {
        background-color: #7B1FA2;
        color: white;
    }
    .metric-card {
        background-color: #EDE7F6;
        border-radius: 8px;
        padding: 15px;
        text-align: center;
    }
    .tabs-container {
        margin-top: 20px;
    }
    .version-info {
        position: fixed;
        bottom: 10px;
        right: 10px;
        font-size: 0.7rem;
        color: #9E9E9E;
    }
    .stAlert {
        margin-top: 15px;
    }
</style>
""", unsafe_allow_html=True)

# Constantes
HABILIDADES_PSICOMOTORAS = {
    "Tonicidade": [
        "Regula√ß√£o de t√¥nus muscular", 
        "Sustenta√ß√£o corporal", 
        "Preparo para a√ß√£o"
    ],
    "Equil√≠brio": [
        "Equil√≠brio est√°tico", 
        "Equil√≠brio din√¢mico", 
        "Recupera√ß√£o de equil√≠brio"
    ],
    "Esquema Corporal": [
        "Identifica√ß√£o de partes do corpo", 
        "Consci√™ncia corporal", 
        "Imagem corporal"
    ],
    "Lateralidade": [
        "Domin√¢ncia lateral", 
        "Orienta√ß√£o direita/esquerda", 
        "Cruzamento de linha m√©dia"
    ],
    "Coordena√ß√£o Motora Global": [
        "Coordena√ß√£o de grandes movimentos", 
        "Saltos", 
        "Corrida", 
        "Arremessos"
    ],
    "Coordena√ß√£o Motora Fina": [
        "Preens√£o", 
        "Manipula√ß√£o de objetos pequenos", 
        "Grafomotricidade", 
        "Recorte"
    ],
    "No√ß√£o Espacial": [
        "Orienta√ß√£o espacial", 
        "Organiza√ß√£o espacial", 
        "Rela√ß√µes espaciais"
    ],
    "No√ß√£o Temporal": [
        "Sequ√™ncia temporal", 
        "Ritmo", 
        "Dura√ß√£o"
    ],
    "Praxia": [
        "Planejamento motor", 
        "Imita√ß√£o de gestos", 
        "Sequenciamento motor"
    ],
    "Habilidades Socioemocionais": [
        "Express√£o corporal", 
        "Regula√ß√£o emocional", 
        "Intera√ß√£o social"
    ],
    "Habilidades Cognitivas": [
        "Aten√ß√£o", 
        "Mem√≥ria", 
        "Percep√ß√£o", 
        "Resolu√ß√£o de problemas"
    ]
}

TIPOS_AVALIACAO = [
    "EDM - Escala de Desenvolvimento Motor (Rosa Neto)",
    "TGMD-2 - Test of Gross Motor Development",
    "FAMA - Ferramenta de Avalia√ß√£o Motora para Autismo",
    "Bateria Psicomotora de V√≠tor da Fonseca",
    "Escala de Equil√≠brio de Berg",
    "Protocolo de Avalia√ß√£o de Coordena√ß√£o Motora Fina",
    "Avalia√ß√£o Inicial",
    "Reavalia√ß√£o",
    "Avalia√ß√£o Personalizada"
]

NIVEIS_DESENVOLVIMENTO = [
    "Muito inferior",
    "Inferior",
    "Normal baixo",
    "Normal m√©dio",
    "Normal alto",
    "Superior",
    "Muito superior"
]

STATUS_AGENDAMENTO = [
    "Agendado", 
    "Confirmado", 
    "Em andamento", 
    "Conclu√≠do", 
    "Cancelado", 
    "Faltou"
]

CORES_STATUS = {
    "Agendado": "#E3F2FD",
    "Confirmado": "#DCEDC8",
    "Em andamento": "#FFF9C4",
    "Conclu√≠do": "#C8E6C9",
    "Cancelado": "#FFCDD2",
    "Faltou": "#FFCCBC"
}

# Fun√ß√µes de dados simulados (para demonstra√ß√£o)
def gerar_dados_demonstracao():
    # Criar diret√≥rio de dados
    os.makedirs("dados", exist_ok=True)
    
    # Dados de pacientes
    pacientes = []
    for i in range(5):
        pacientes.append({
            'id': str(uuid.uuid4()),
            'nome': f"Paciente Teste {i+1}",
            'data_nascimento': (datetime.now() - timedelta(days=365*10 - i*500)).strftime('%Y-%m-%d'),
            'responsavel': f"Respons√°vel {i+1}",
            'telefone': f"(11) 9999-888{i}",
            'email': f"paciente{i+1}@teste.com",
            'data_entrada': (datetime.now() - timedelta(days=i*30)).strftime('%Y-%m-%d'),
            'diagnostico': "TEA" if i % 2 == 0 else "TDAH",
            'nivel_suporte': "N√≠vel 1" if i < 3 else "N√≠vel 2",
            'preferencias': f"Prefer√™ncias do paciente {i+1}",
            'coisas_acalmam': f"Coisas que acalmam {i+1}",
            'nao_gosta': f"Coisas que n√£o gosta {i+1}",
            'gatilhos': f"Gatilhos do paciente {i+1}",
            'brinquedos_favoritos': f"Brinquedos favoritos {i+1}"
        })
    
    # Dados de atendimentos
    atendimentos = []
    for i in range(15):
        paciente_idx = i % 5
        atendimentos.append({
            'id': str(uuid.uuid4()),
            'paciente_id': pacientes[paciente_idx]['id'],
            'data': (datetime.now() - timedelta(days=i*3)).strftime('%Y-%m-%d'),
            'terapeuta': "Terapeuta Demo",
            'habilidades_trabalhadas': "Equil√≠brio est√°tico, Coordena√ß√£o motora fina",
            'descricao': f"Descri√ß√£o do atendimento {i+1}",
            'evolucao': f"Evolu√ß√£o observada no atendimento {i+1}",
            'comportamentos': f"Comportamentos do atendimento {i+1}"
        })
    
    # Dados de avalia√ß√µes
    avaliacoes = []
    for i in range(5):
        paciente_idx = i % 5
        avaliacoes.append({
            'id': str(uuid.uuid4()),
            'paciente_id': pacientes[paciente_idx]['id'],
            'data': (datetime.now() - timedelta(days=i*15)).strftime('%Y-%m-%d'),
            'tipo_avaliacao': TIPOS_AVALIACAO[i % len(TIPOS_AVALIACAO)],
            'terapeuta': "Avaliador Demo",
            'resultados': f"Resultados da avalia√ß√£o {i+1}",
            'recomendacoes': f"Recomenda√ß√µes da avalia√ß√£o {i+1}",
            'proxima_avaliacao': (datetime.now() + timedelta(days=180)).strftime('%Y-%m-%d'),
            'areas_avaliadas': json.dumps({"Equil√≠brio est√°tico": "Normal m√©dio", "Coordena√ß√£o motora fina": "Normal baixo"}),
            'pontuacao': json.dumps({"Equil√≠brio est√°tico": 4, "Coordena√ß√£o motora fina": 3})
        })
    
    # Dados de agendamentos
    agendamentos = []
    for i in range(10):
        paciente_idx = i % 5
        agendamentos.append({
            'id': str(uuid.uuid4()),
            'paciente_id': pacientes[paciente_idx]['id'],
            'data': (datetime.now() + timedelta(days=i)).strftime('%Y-%m-%d'),
            'horario': f"{8 + i%8}:00",
            'terapeuta': "Terapeuta Demo",
            'status': STATUS_AGENDAMENTO[i % len(STATUS_AGENDAMENTO)],
            'observacao': f"Observa√ß√£o do agendamento {i+1}"
        })
    
    return pacientes, atendimentos, avaliacoes, agendamentos

# Simplifica√ß√£o: Usar dados simulados para demonstra√ß√£o
def carregar_dados():
    """Carrega os dados para o aplicativo (simplificado para demonstra√ß√£o)"""
    # Criar dados simulados para demonstra√ß√£o
    pacientes, atendimentos, avaliacoes, agendamentos = gerar_dados_demonstracao()
    
    # Converter para DataFrames
    pacientes_df = pd.DataFrame(pacientes)
    atendimentos_df = pd.DataFrame(atendimentos)
    avaliacoes_df = pd.DataFrame(avaliacoes)
    agendamentos_df = pd.DataFrame(agendamentos)
    
    return pacientes_df, atendimentos_df, avaliacoes_df, agendamentos_df

# Fun√ß√£o de autentica√ß√£o simplificada
def fazer_login(email, senha):
    """Verifica as credenciais de login (simplificado para demonstra√ß√£o)"""
    usuarios = {
        "admin@neurobase.com": {
            "senha": "admin",
            "nome": "Administrador",
            "perfil": "admin"
        },
        "terapeuta@neurobase.com": {
            "senha": "terapeuta",
            "nome": "Terapeuta",
            "perfil": "terapeuta"
        }
    }
    
    if email in usuarios and usuarios[email]["senha"] == senha:
        return True, usuarios[email]
    
    return False, None

# Componentes de interface
def mostrar_dashboard(pacientes_df, atendimentos_df, avaliacoes_df, agendamentos_df):
    """Exibe o dashboard principal"""
    st.markdown("<h1 class='main-header'>Dashboard</h1>", unsafe_allow_html=True)
    
    # M√©tricas principais
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("<div class='metric-card'>", unsafe_allow_html=True)
        st.metric(label="Total Pacientes", value=len(pacientes_df))
        st.markdown("</div>", unsafe_allow_html=True)
    
    with col2:
        st.markdown("<div class='metric-card'>", unsafe_allow_html=True)
        hoje = datetime.now().strftime('%Y-%m-%d')
        atendimentos_hoje = len(atendimentos_df[atendimentos_df['data'] == hoje])
        st.metric(label="Atendimentos Hoje", value=atendimentos_hoje)
        st.markdown("</div>", unsafe_allow_html=True)
    
    with col3:
        st.markdown("<div class='metric-card'>", unsafe_allow_html=True)
        proximas_avaliacoes = len(avaliacoes_df)
        st.metric(label="Avalia√ß√µes Pendentes", value=proximas_avaliacoes)
        st.markdown("</div>", unsafe_allow_html=True)
    
    with col4:
        st.markdown("<div class='metric-card'>", unsafe_allow_html=True)
        agendamentos_pendentes = len(agendamentos_df[agendamentos_df['status'].isin(['Agendado', 'Confirmado'])])
        st.metric(label="Agendamentos Pendentes", value=agendamentos_pendentes)
        st.markdown("</div>", unsafe_allow_html=True)
    
    # Agenda do dia
    st.markdown("<h2 class='sub-header'>Agenda do Dia</h2>", unsafe_allow_html=True)
    
    # Tabela de agendamentos do dia
    hoje = datetime.now().strftime('%Y-%m-%d')
    agendamentos_hoje = agendamentos_df[agendamentos_df['data'] == hoje]
    
    if len(agendamentos_hoje) > 0:
        # Juntar com nomes dos pacientes
        agendamentos_hoje = pd.merge(
            agendamentos_hoje,
            pacientes_df[['id', 'nome']],
            left_on='paciente_id',
            right_on='id',
            how='left',
            suffixes=('', '_paciente')
        )
        
        for i, agendamento in agendamentos_hoje.iterrows():
            cor_status = CORES_STATUS.get(agendamento['status'], "#ECEFF1")
            
            st.markdown(
                f"<div style='background-color:{cor_status}; padding:10px; margin:5px; border-radius:5px;'>",
                unsafe_allow_html=True
            )
            
            col1, col2, col3 = st.columns([1, 3, 1])
            
            with col1:
                st.markdown(f"**{agendamento['horario']}**")
            
            with col2:
                nome_paciente = agendamento['nome'] if 'nome' in agendamento else "Paciente n√£o encontrado"
                st.markdown(f"**{nome_paciente}**")
                st.markdown(f"Terapeuta: {agendamento['terapeuta']}")
            
            with col3:
                st.markdown(f"**Status:** {agendamento['status']}")
            
            st.markdown("</div>", unsafe_allow_html=True)
    else:
        st.info("N√£o h√° agendamentos para hoje.")

def mostrar_pacientes(pacientes_df):
    """Exibe a lista de pacientes"""
    st.markdown("<h1 class='main-header'>Pacientes</h1>", unsafe_allow_html=True)
    
    # Filtro por nome
    filtro_nome = st.text_input("Buscar por nome:")
    
    # Aplicar filtro
    pacientes_filtrados = pacientes_df
    if filtro_nome:
        pacientes_filtrados = pacientes_filtrados[pacientes_filtrados['nome'].str.contains(filtro_nome, case=False, na=False)]
    
    # Exibir lista de pacientes
    if len(pacientes_filtrados) > 0:
        for i, paciente in pacientes_filtrados.iterrows():
            st.markdown("<div class='card'>", unsafe_allow_html=True)
            
            col1, col2 = st.columns([1, 3])
            
            with col1:
                st.image("https://via.placeholder.com/100x100.png?text=Foto", width=100)
            
            with col2:
                st.subheader(paciente['nome'])
                
                # Calcular idade
                if 'data_nascimento' in paciente and paciente['data_nascimento']:
                    try:
                        data_nasc = datetime.strptime(paciente['data_nascimento'], '%Y-%m-%d')
                        idade = (datetime.now() - data_nasc).days // 365
                        st.write(f"Idade: {idade} anos")
                    except:
                        st.write("Data de nascimento n√£o dispon√≠vel")
                
                st.write(f"Diagn√≥stico: {paciente['diagnostico']}")
                st.write(f"N√≠vel de Suporte: {paciente['nivel_suporte']}")
            
            with st.expander("Ver detalhes"):
                st.markdown("### Informa√ß√µes pessoais")
                st.write(f"Respons√°vel: {paciente['responsavel']}")
                st.write(f"Contato: {paciente['telefone']}")
                st.write(f"E-mail: {paciente['email']}")
                
                st.markdown("### Prefer√™ncias")
                st.write(f"**Gosta de:** {paciente['preferencias']}")
                st.write(f"**N√£o gosta de:** {paciente['nao_gosta']}")
                st.write(f"**O que o acalma:** {paciente['coisas_acalmam']}")
            
            st.markdown("</div>", unsafe_allow_html=True)
    else:
        st.info("Nenhum paciente encontrado com esse nome.")

def mostrar_atendimentos(atendimentos_df, pacientes_df):
    """Exibe os atendimentos"""
    st.markdown("<h1 class='main-header'>Atendimentos</h1>", unsafe_allow_html=True)
    
    # Filtro por paciente
    paciente_id = st.selectbox(
        "Filtrar por paciente:",
        options=["Todos"] + pacientes_df['id'].tolist(),
        format_func=lambda x: "Todos os pacientes" if x == "Todos" else pacientes_df[pacientes_df['id'] == x]['nome'].iloc[0] if x in pacientes_df['id'].values else "Paciente n√£o encontrado"
    )
    
    # Aplicar filtro
    atendimentos_filtrados = atendimentos_df
    if paciente_id != "Todos":
        atendimentos_filtrados = atendimentos_filtrados[atendimentos_filtrados['paciente_id'] == paciente_id]
    
    # Ordenar por data (mais recente primeiro)
    atendimentos_filtrados = atendimentos_filtrados.sort_values('data', ascending=False)
    
    # Exibir atendimentos
    if len(atendimentos_filtrados) > 0:
        # Juntar com nomes dos pacientes
        atendimentos_completos = pd.merge(
            atendimentos_filtrados,
            pacientes_df[['id', 'nome']],
            left_on='paciente_id',
            right_on='id',
            how='left',
            suffixes=('', '_paciente')
        )
        
        for i, atendimento in atendimentos_completos.iterrows():
            st.markdown("<div class='card'>", unsafe_allow_html=True)
            
            col1, col2 = st.columns([1, 3])
            
            with col1:
                st.markdown(f"**Data:** {atendimento['data']}")
            
            with col2:
                nome_paciente = atendimento['nome'] if 'nome' in atendimento else "Paciente n√£o encontrado"
                st.markdown(f"**Paciente:** {nome_paciente}")
                st.markdown(f"**Terapeuta:** {atendimento['terapeuta']}")
                
                # Habilidades trabalhadas
                st.markdown("**Habilidades trabalhadas:**")
                if 'habilidades_trabalhadas' in atendimento and atendimento['habilidades_trabalhadas']:
                    habs = atendimento['habilidades_trabalhadas'].split(',')
                    for hab in habs:
                        st.markdown(f"<span class='skill-tag'>{hab.strip()}</span>", unsafe_allow_html=True)
            
            with st.expander("Ver detalhes"):
                st.markdown("**Descri√ß√£o:**")
                st.write(atendimento['descricao'])
                
                st.markdown("**Evolu√ß√£o:**")
                st.write(atendimento['evolucao'])
                
                if 'comportamentos' in atendimento and atendimento['comportamentos']:
                    st.markdown("**Comportamentos:**")
                    st.write(atendimento['comportamentos'])
            
            st.markdown("</div>", unsafe_allow_html=True)
    else:
        st.info("Nenhum atendimento encontrado com os filtros selecionados.")

def mostrar_avaliacoes(avaliacoes_df, pacientes_df):
    """Exibe as avalia√ß√µes"""
    st.markdown("<h1 class='main-header'>Avalia√ß√µes</h1>", unsafe_allow_html=True)
    
    # Filtro por paciente
    paciente_id = st.selectbox(
        "Filtrar por paciente:",
        options=["Todos"] + pacientes_df['id'].tolist(),
        format_func=lambda x: "Todos os pacientes" if x == "Todos" else pacientes_df[pacientes_df['id'] == x]['nome'].iloc[0] if x in pacientes_df['id'].values else "Paciente n√£o encontrado",
        key="filtro_avaliacoes"
    )
    
    # Aplicar filtro
    avaliacoes_filtradas = avaliacoes_df
    if paciente_id != "Todos":
        avaliacoes_filtradas = avaliacoes_filtradas[avaliacoes_filtradas['paciente_id'] == paciente_id]
    
    # Ordenar por data (mais recente primeiro)
    avaliacoes_filtradas = avaliacoes_filtradas.sort_values('data', ascending=False)
    
    # Exibir avalia√ß√µes
    if len(avaliacoes_filtradas) > 0:
        # Juntar com nomes dos pacientes
        avaliacoes_completas = pd.merge(
            avaliacoes_filtradas,
            pacientes_df[['id', 'nome']],
            left_on='paciente_id',
            right_on='id',
            how='left',
            suffixes=('', '_paciente')
        )
        
        for i, avaliacao in avaliacoes_completas.iterrows():
            st.markdown("<div class='card'>", unsafe_allow_html=True)
            
            col1, col2 = st.columns([1, 3])
            
            with col1:
                st.markdown(f"**Data:** {avaliacao['data']}")
                st.markdown(f"**Tipo:** {avaliacao['tipo_avaliacao']}")
            
            with col2:
                nome_paciente = avaliacao['nome'] if 'nome' in avaliacao else "Paciente n√£o encontrado"
                st.markdown(f"**Paciente:** {nome_paciente}")
                st.markdown(f"**Avaliador:** {avaliacao['terapeuta']}")
                
                if 'proxima_avaliacao' in avaliacao and avaliacao['proxima_avaliacao']:
                    st.markdown(f"**Pr√≥xima avalia√ß√£o:** {avaliacao['proxima_avaliacao']}")
            
            with st.expander("Ver resultados"):
                # √Åreas avaliadas
                if 'areas_avaliadas' in avaliacao and avaliacao['areas_avaliadas']:
                    st.markdown("### √Åreas Avaliadas")
                    try:
                        areas = json.loads(avaliacao['areas_avaliadas'])
                        for area, nivel in areas.items():
                            st.markdown(f"- **{area}:** {nivel}")
                    except:
                        st.write("Erro ao carregar √°reas avaliadas")
                
                st.markdown("### Resultados")
                st.write(avaliacao['resultados'])
                
                st.markdown("### Recomenda√ß√µes")
                st.write(avaliacao['recomendacoes'])
            
            st.markdown("</div>", unsafe_allow_html=True)
    else:
        st.info("Nenhuma avalia√ß√£o encontrada com os filtros selecionados.")

def mostrar_agendamentos(agendamentos_df, pacientes_df):
    """Exibe os agendamentos"""
    st.markdown("<h1 class='main-header'>Agendamentos</h1>", unsafe_allow_html=True)
    
    # Filtros
    col1, col2 = st.columns(2)
    
    with col1:
        data_filtro = st.date_input("Filtrar por data:", value=datetime.now())
    
    with col2:
        paciente_id = st.selectbox(
            "Filtrar por paciente:",
            options=["Todos"] + pacientes_df['id'].tolist(),
            format_func=lambda x: "Todos os pacientes" if x == "Todos" else pacientes_df[pacientes_df['id'] == x]['nome'].iloc[0] if x in pacientes_df['id'].values else "Paciente n√£o encontrado",
            key="filtro_agendamentos"
        )
    
    # Aplicar filtros
    agendamentos_filtrados = agendamentos_df
    
    # Filtro por data
    agendamentos_filtrados = agendamentos_filtrados[agendamentos_filtrados['data'] == data_filtro.strftime('%Y-%m-%d')]
    
    # Filtro por paciente
    if paciente_id != "Todos":
        agendamentos_filtrados = agendamentos_filtrados[agendamentos_filtrados['paciente_id'] == paciente_id]
    
    # Ordenar por hor√°rio
    agendamentos_filtrados = agendamentos_filtrados.sort_values('horario')
    
    # Exibir agendamentos
    if len(agendamentos_filtrados) > 0:
        # Juntar com nomes dos pacientes
        agendamentos_completos = pd.merge(
            agendamentos_filtrados,
            pacientes_df[['id', 'nome']],
            left_on='paciente_id',
            right_on='id',
            how='left',
            suffixes=('', '_paciente')
        )
        
        for i, agendamento in agendamentos_completos.iterrows():
            cor_status = CORES_STATUS.get(agendamento['status'], "#ECEFF1")
            
            st.markdown(
                f"<div style='background-color:{cor_status}; padding:10px; margin:5px; border-radius:5px;'>",
                unsafe_allow_html=True
            )
            
            col1, col2, col3 = st.columns([1, 3, 1])
            
            with col1:
                st.markdown(f"**{agendamento['horario']}**")
            
            with col2:
                nome_paciente = agendamento['nome'] if 'nome' in agendamento else "Paciente n√£o encontrado"
                st.markdown(f"**{nome_paciente}**")
                st.markdown(f"Terapeuta: {agendamento['terapeuta']}")
                
                if 'observacao' in agendamento and agendamento['observacao']:
                    st.markdown(f"Obs: {agendamento['observacao']}")
            
            with col3:
                st.markdown(f"**Status:** {agendamento['status']}")
                
                # Menu de status (simulado)
                novo_status = st.selectbox(
                    "Alterar status:",
                    options=STATUS_AGENDAMENTO,
                    index=STATUS_AGENDAMENTO.index(agendamento['status']),
                    key=f"status_{agendamento['id']}"
                )
                
                if novo_status != agendamento['status']:
                    if st.button("Salvar", key=f"salvar_{agendamento['id']}"):
                        st.success(f"Status alterado para: {novo_status}")
            
            st.markdown("</div>", unsafe_allow_html=True)
    else:
        st.info("Nenhum agendamento encontrado para a data selecionada.")

def mostrar_relatorios(pacientes_df, atendimentos_df, avaliacoes_df):
    """Exibe a se√ß√£o de relat√≥rios"""
    st.markdown("<h1 class='main-header'>Relat√≥rios</h1>", unsafe_allow_html=True)
    
    # Selecionar paciente
    paciente_id = st.selectbox(
        "Selecione o paciente:",
        options=pacientes_df['id'].tolist(),
        format_func=lambda x: pacientes_df[pacientes_df['id'] == x]['nome'].iloc[0] if x in pacientes_df['id'].values else "Paciente n√£o encontrado"
    )
    
    # Selecionar per√≠odo
    col1, col2 = st.columns(2)
    
    with col1:
        data_inicio = st.date_input("Data inicial:", value=datetime.now() - timedelta(days=30))
    
    with col2:
        data_fim = st.date_input("Data final:", value=datetime.now())
    
    # Op√ß√µes do relat√≥rio
    opcoes_relatorio = st.multiselect(
        "Incluir no relat√≥rio:",
        options=["Dados pessoais", "Resumo de atendimentos", "Avalia√ß√µes", "Habilidades trabalhadas", "Gr√°ficos de evolu√ß√£o"],
        default=["Dados pessoais", "Resumo de atendimentos", "Habilidades trabalhadas"]
    )
    
    # Gerar relat√≥rio
    if st.button("Gerar Relat√≥rio"):
        # Buscar dados do paciente
        paciente = pacientes_df[pacientes_df['id'] == paciente_id].iloc[0]
        
        # Filtrar atendimentos do per√≠odo
        atendimentos_periodo = atendimentos_df[
            (atendimentos_df['paciente_id'] == paciente_id) &
            (atendimentos_df['data'] >= data_inicio.strftime('%Y-%m-%d')) &
            (atendimentos_df['data'] <= data_fim.strftime('%Y-%m-%d'))
        ]
        
        # Criar relat√≥rio
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.markdown(f"<h2>Relat√≥rio de {paciente['nome']}</h2>", unsafe_allow_html=True)
        st.markdown(f"Per√≠odo: {data_inicio.strftime('%d/%m/%Y')} a {data_fim.strftime('%d/%m/%Y')}")
        
        if "Dados pessoais" in opcoes_relatorio:
            st.markdown("### Dados Pessoais")
            st.markdown(f"**Nome:** {paciente['nome']}")
            
            # Calcular idade
            if 'data_nascimento' in paciente and paciente['data_nascimento']:
                try:
                    data_nasc = datetime.strptime(paciente['data_nascimento'], '%Y-%m-%d')
                    idade = (datetime.now() - data_nasc).days // 365
                    st.markdown(f"**Idade:** {idade} anos")
                except:
                    pass
            
            st.markdown(f"**Diagn√≥stico:** {paciente['diagnostico']}")
            st.markdown(f"**N√≠vel de Suporte:** {paciente['nivel_suporte']}")
        
        if "Resumo de atendimentos" in opcoes_relatorio:
            st.markdown("### Resumo de Atendimentos")
            st.markdown(f"Total de atendimentos no per√≠odo: {len(atendimentos_periodo)}")
            
            if len(atendimentos_periodo) > 0:
                for i, atendimento in atendimentos_periodo.iterrows():
                    st.markdown(f"#### Sess√£o do dia {atendimento['data']}")
                    st.markdown(f"Terapeuta: {atendimento['terapeuta']}")
                    st.markdown(f"Evolu√ß√£o: {atendimento['evolucao']}")
        
        if "Habilidades trabalhadas" in opcoes_relatorio and len(atendimentos_periodo) > 0:
            st.markdown("### Habilidades Trabalhadas")
            
            # Contar frequ√™ncia de habilidades
            habilidades_contagem = {}
            
            for i, atendimento in atendimentos_periodo.iterrows():
                if 'habilidades_trabalhadas' in atendimento and atendimento['habilidades_trabalhadas']:
                    habilidades = [h.strip() for h in atendimento['habilidades_trabalhadas'].split(',')]
                    
                    for hab in habilidades:
                        if hab in habilidades_contagem:
                            habilidades_contagem[hab] += 1
                        else:
                            habilidades_contagem[hab] = 1
            
            # Criar gr√°fico de habilidades
            if habilidades_contagem:
                # Ordenar por frequ√™ncia
                habilidades_ordenadas = sorted(habilidades_contagem.items(), key=lambda x: x[1], reverse=True)
                
                # Criar gr√°fico
                fig, ax = plt.subplots(figsize=(10, 6))
                
                # Limitar para 10 primeiras
                top_habilidades = habilidades_ordenadas[:10]
                habs, frequencias = zip(*top_habilidades)
                
                ax.barh(habs, frequencias, color='purple')
                ax.set_xlabel('N√∫mero de Sess√µes')
                ax.set_title('Habilidades Mais Trabalhadas no Per√≠odo')
                plt.tight_layout()
                st.pyplot(fig)
        
        if "Avalia√ß√µes" in opcoes_relatorio:
            st.markdown("### Avalia√ß√µes no Per√≠odo")
            
            # Filtrar avalia√ß√µes do per√≠odo
            avaliacoes_periodo = avaliacoes_df[
                (avaliacoes_df['paciente_id'] == paciente_id) &
                (avaliacoes_df['data'] >= data_inicio.strftime('%Y-%m-%d')) &
                (avaliacoes_df['data'] <= data_fim.strftime('%Y-%m-%d'))
            ]
            
            if len(avaliacoes_periodo) > 0:
                for i, avaliacao in avaliacoes_periodo.iterrows():
                    st.markdown(f"#### {avaliacao['data']} - {avaliacao['tipo_avaliacao']}")
                    st.markdown(f"Avaliador: {avaliacao['terapeuta']}")
                    st.markdown(f"Resultados: {avaliacao['resultados']}")
                    st.markdown(f"Recomenda√ß√µes: {avaliacao['recomendacoes']}")
            else:
                st.info("N√£o foram realizadas avalia√ß√µes no per√≠odo selecionado.")
        
        st.markdown("</div>", unsafe_allow_html=True)
        
        # Bot√µes de exporta√ß√£o (simulados)
        col1, col2 = st.columns(2)
        
        with col1:
            st.download_button(
                "Exportar como PDF",
                data="Simula√ß√£o de PDF",
                file_name=f"Relatorio_{paciente['nome']}.pdf",
                mime="application/pdf"
            )
        
        with col2:
            st.download_button(
                "Exportar como DOCX",
                data="Simula√ß√£o de DOCX",
                file_name=f"Relatorio_{paciente['nome']}.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )

def pagina_login():
    """Exibe a p√°gina de login"""
    st.markdown("<h1 class='main-header'>NeuroBase - Sistema de Gest√£o em Psicomotricidade</h1>", unsafe_allow_html=True)
    
    # Layout centralizado
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.markdown("### Login")
        
        # Formul√°rio de login
        email = st.text_input("E-mail")
        senha = st.text_input("Senha", type="password")
        
        if st.button("Entrar"):
            if email and senha:
                sucesso, usuario = fazer_login(email, senha)
                
                if sucesso:
                    # Armazenar informa√ß√µes do usu√°rio na sess√£o
                    st.session_state.autenticado = True
                    st.session_state.usuario = usuario["nome"]
                    st.session_state.perfil = usuario["perfil"]
                    st.session_state.email = email
                    
                    st.success(f"Bem-vindo, {usuario['nome']}!")
                    # Redirecionamento ser√° feito pelo loop principal
                else:
                    st.error("E-mail ou senha incorretos")
            else:
                st.error("Por favor, preencha todos os campos")
        
        st.markdown("</div>", unsafe_allow_html=True)
        
        # Informa√ß√µes de login para demonstra√ß√£o
        st.markdown("### Credenciais para demonstra√ß√£o:")
        st.markdown("**Administrador**:  \nE-mail: admin@neurobase.com  \nSenha: admin")
        st.markdown("**Terapeuta**:  \nE-mail: terapeuta@neurobase.com  \nSenha: terapeuta")
    
    # Rodap√©
    st.markdown("<div class='version-info'>NeuroBase v" + APP_VERSION + "</div>", unsafe_allow_html=True)

def main():
    """Fun√ß√£o principal do aplicativo"""
    # Inicializar estado da sess√£o se necess√°rio
    if 'autenticado' not in st.session_state:
        st.session_state.autenticado = False
    
    # Verificar autentica√ß√£o
    if not st.session_state.autenticado:
        pagina_login()
        return
    
    # Se chegou aqui, est√° autenticado
    # Carregar dados
    pacientes_df, atendimentos_df, avaliacoes_df, agendamentos_df = carregar_dados()
    
    # Barra lateral para navega√ß√£o
    st.sidebar.markdown(f"### Bem-vindo, {st.session_state.usuario}!")
    st.sidebar.markdown("---")
    
    menu = st.sidebar.radio(
        "Menu",
        ["Dashboard", "Pacientes", "Atendimentos", "Avalia√ß√µes", "Agendamentos", "Relat√≥rios"]
    )
    
    st.sidebar.markdown("---")
    
    # Bot√£o de logout
    if st.sidebar.button("Sair"):
        st.session_state.autenticado = False
        st.session_state.usuario = None
        st.session_state.perfil = None
        st.session_state.email = None
        st.success("Logout realizado com sucesso!")
        st.stop()
    
    # Exibir p√°gina selecionada
    if menu == "Dashboard":
        mostrar_dashboard(pacientes_df, atendimentos_df, avaliacoes_df, agendamentos_df)
    elif menu == "Pacientes":
        mostrar_pacientes(pacientes_df)
    elif menu == "Atendimentos":
        mostrar_atendimentos(atendimentos_df, pacientes_df)
    elif menu == "Avalia√ß√µes":
        mostrar_avaliacoes(avaliacoes_df, pacientes_df)
    elif menu == "Agendamentos":
        mostrar_agendamentos(agendamentos_df, pacientes_df)
    elif menu == "Relat√≥rios":
        mostrar_relatorios(pacientes_df, atendimentos_df, avaliacoes_df)

# Executar o aplicativo
if __name__ == "__main__":
    main()
